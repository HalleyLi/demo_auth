<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SH3H.SharpFrame.Math</name>
    </assembly>
    <members>
        <member name="T:SH3H.SharpFrame.Math.Combinatorics.Combination">
            <summary>
            Represents an ascending sequence of non-repeating picks from a supplied number of choices.
            </summary>
            <remarks>
            <para>
            <em>K</em>-combinations are also known as pick-combinations.
            
            The defining variables are <em>n</em> which is the number of possible choices and
            <em>k</em> which is the number of non-repeatable picks from those choices.
            
            This is contrasted to <em>k</em>-multicombinations where the elements in a row may repeat.
            </para>
            <para>
            The <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> class produces <em>k</em>-combinations with ascending
            elements.
            
            While sequence order of the elements is not a requirement of <em>k</em>-combinations,
            producing an ascending sequence allows ranking the rows into an ordered table.
            </para>
            <para>
            Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Picks"/> property to get the number of elements (<em>k</em>)
            of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> taken from a possible number of
            <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Choices"/> (<em>n</em>).
            
            Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.RowCount"/> property to get the number of distinct possible
            <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequences.
            
            Use the <see cref="P:Kw.Combinatorics.Combination.Item(System.Int32)">indexer</see>
            to get a specified element of the sequence.
            
            Use the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Combination.GetEnumerator">default enumerator</see> to iterate thru
            the elements of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>.
            
            Use the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Combination.Permute``1(SH3H.SharpFrame.Math.Combinatorics.Combination,System.Collections.Generic.IList{``0})">Permute</see> method to pick objects from a supplied array
            of choices based on the current sequence.
            </para>
            <para>
            Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Rank"/> property to get or set the row index in a lexicographically
            ordered <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> table of all possible sequences in an ascending order.
            
            Use <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Combination.GetRows"/> to iterate thru all possible sequences
            of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> ordered by <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Rank"/>.
            
            Use <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Combination.GetRowsForAllPicks"/> to iterate
            thru every table of all picks in the range (1..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Picks"/>).
            </para>
            <para>
            The default appearance of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> row is a list of
            integers (starting at 0) enclosed in braces. The appearance may be tailored 3 ways:
            <ul>
              <li>
                Map each element to a different value using the
                <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Combination.GetEnumerator">default enumerator</see> or the
                <see cref="P:Kw.Combinatorics.Multicombination.Item(System.Int32)">indexer</see>.
              </li>
              <li>
                Use the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Combination.Permute``1(SH3H.SharpFrame.Math.Combinatorics.Combination,System.Collections.Generic.IList{``0})">Permute</see> method and output the rearranged values.
              </li>
              <li>
                Define a subclass of <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> and override
                <see cref="M:System.Object.ToString">ToString()</see>.
                (See <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Combination.GetRowsForAllPicks"/> for an example.)
              </li>
            </ul>
            </para>
            <para>
            For more information about <em>k</em>-combinations, see:
            </para>
            <para>
            <em>http://en.wikipedia.org/wiki/Combination</em>
            </para>
            </remarks>
            <example>
            <para>
            Iterating thru <c>new Combination (6, 3).GetRows()</c> produces:
            </para>
            <para>
            <c>{ 0, 1, 2 }</c><br/>
            <c>{ 0, 1, 3 }</c><br/>
            <c>{ 0, 1, 4 }</c><br/>
            <c>{ 0, 1, 5 }</c><br/>
            <c>{ 0, 2, 3 }</c><br/>
            <c>{ 0, 2, 4 }</c><br/>
            <c>{ 0, 2, 5 }</c><br/>
            <c>{ 0, 3, 4 }</c><br/>
            <c>{ 0, 3, 5 }</c><br/>
            <c>{ 0, 4, 5 }</c><br/>
            <c>{ 1, 2, 3 }</c><br/>
            <c>{ 1, 2, 4 }</c><br/>
            <c>{ 1, 2, 5 }</c><br/>
            <c>{ 1, 3, 4 }</c><br/>
            <c>{ 1, 3, 5 }</c><br/>
            <c>{ 1, 4, 5 }</c><br/>
            <c>{ 2, 3, 4 }</c><br/>
            <c>{ 2, 3, 5 }</c><br/>
            <c>{ 2, 4, 5 }</c><br/>
            <c>{ 3, 4, 5 }</c>
            </para>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.#ctor">
            <summary>
            Make an empty <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>.
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.#ctor(SH3H.SharpFrame.Math.Combinatorics.Combination)">
            <summary>
            Make a copy of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>.
            </summary>
            <param name="source">Instance to copy.</param>
            <exception cref="T:System.ArgumentNullException">When <em>source</em> is <b>null</b>.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.#ctor(System.Int32)">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> from the supplied
            <em>choices</em> of all <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Picks"/> of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Rank"/> 0.
            </summary>
            <param name="choices">Number of elements in the sequence.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <em>choices</em> less than 0.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.#ctor(System.Int32,System.Int32)">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> from the supplied
            <em>choices</em> and <em>picks</em> of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Rank"/> 0.
            </summary>
            <param name="choices">Number of values to pick from.</param>
            <param name="picks">Number of elements in the sequence.</param>
            <example>
            <code source="Examples\Combination\CnExample01\CnExample01.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When negative value supplied; when <em>picks</em> greater than <em>choices</em>.
            </exception>
            <exception cref="T:System.OverflowException">When the numbers are just too big.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.#ctor(System.Int32,System.Int32,System.Int64)">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> from the supplied
            <em>choices</em> and <em>picks</em> of the supplied <em>rank</em>.
            </summary>
            <remarks>
            If the supplied <em>rank</em> is out of the range (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.RowCount"/>-1),
            it will be normalized to the valid range. For example, a value of -1 will
            produce the last row in the ordered table.
            </remarks>
            <param name="choices">Number of values to pick from.</param>
            <param name="picks">Number of elements in the sequence.</param>
            <param name="rank">Initial row index in the ordered <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> table.</param>
            <example>
            <code source="Examples\Combination\CnExample05\CnExample05.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When negative value supplied; when <em>picks</em> greater than <em>choices</em>.
            </exception>
            <exception cref="T:System.OverflowException">When too many <em>choices</em>.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.#ctor(System.Int32,System.Int32[])">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> from the supplied elements.
            </summary>
            <param name="choices">Number of values to pick from.</param>
            <param name="source">Array of integers.</param>
            <example>
            <code source="Examples\Combination\CnExample04\CnExample04.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentNullException">When <em>source</em> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When length of <em>source</em> is greater than <em>picks</em>;
            when <em>source</em> contains invalid data.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.CompareTo(System.Object)">
            <summary>Compare two <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>s.</summary>
            <param name="obj">Target of the comparison.</param>
            <returns>
            A signed integer indicating the sort order of this instance to <em>obj</em>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.CompareTo(SH3H.SharpFrame.Math.Combinatorics.Combination)">
            <summary>Compare two <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>s.</summary>
            <param name="other">Target of the comparison.</param>
            <returns>
            A signed integer indicating the sort order of this instance to <em>other</em>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.CopyTo(System.Int32[])">
            <summary>
            Copy the entire sequence to the supplied destination.
            </summary>
            <param name="array">Destination of copy.</param>
            <exception cref="T:System.ArgumentNullException">When <em>array</em> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">When not enough space in <em>array</em>.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.Equals(System.Object)">
            <summary>
            Indicate whether two <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>s have the same value.
            </summary>
            <param name="obj">Target of the comparison.</param>
            <returns>
            <b>true</b> if <em>obj</em> has the same value as this object; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.Equals(SH3H.SharpFrame.Math.Combinatorics.Combination)">
            <summary>
            Indicate whether two <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>s have the same value.
            </summary>
            <param name="other">Target of the comparison.</param>
            <returns>
            <b>true</b> if <em>other</em> has the same value as this instance;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.System#Collections#IEnumerable#GetEnumerator">
            <summary>Get an object-based enumerator of the elements.</summary>
            <returns>Object-based elemental enumerator.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.GetEnumerator">
            <summary>Enumerate all elements of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>.</summary>
            <returns>
            An <c>IEnumerator&lt;int&gt;</c> for this <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>.
            </returns>
            <example>
            <code source="Examples\Combination\CnExample05\CnExample05.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.GetHashCode">
            <summary>Get the hash oode of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.GetRows">
            <summary>
            Iterate thru all rows of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> table
            for every value of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Rank"/> ascending.
            </summary>
            <returns>An iterator for a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> table.</returns>
            <remarks>
            If the start row is not of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Rank"/> 0, the iteration will wrap around
            so that <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.RowCount"/> items are always produced.
            </remarks>
            <example>
            <code source="Examples\Combination\CnExample01\CnExample01.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.GetRowsForAllPicks">
            <summary>
            Iterate thru all rows of all <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> tables for every
            pick in the range (1..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Picks"/>).
            </summary>
            <returns>An iterator for a series of <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> tables.</returns>
            <example>
            <code source="Examples\Combination\CnExample02\CnExample02.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.ToString">
            <summary>
            Provide a readable form of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence.
            </summary>
            <returns>A <c>string</c> that represents the sequence.</returns>
            <remarks>Result is enclosed in braces and separated by commas.</remarks>
            <example>
            <code source="Examples\Combination\CnExample04\CnExample04.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.Permute``1(SH3H.SharpFrame.Math.Combinatorics.Combination,System.Collections.Generic.IList{``0})">
            <summary>
            Apply a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence to rearrange the supplied list or array.
            </summary>
            <typeparam name="T">Type of items to rearrange.</typeparam>
            <param name="arrangement">New arrangement for items.</param>
            <param name="source">List of items to rearrange.</param>
            <returns>List of rearranged items.</returns>
            <example>
            <code source="Examples\Combination\CnExample03\CnExample03.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentNullException">
            When <em>arrangement</em> or <em>source</em> is <b>null</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When length of <em>source</em> is less than <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Picks"/>.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.op_Equality(SH3H.SharpFrame.Math.Combinatorics.Combination,SH3H.SharpFrame.Math.Combinatorics.Combination)">
            <summary>Indicate whether 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>s are equal.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence.</param>
            <returns><b>true</b> if supplied sequences are equal;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.op_Inequality(SH3H.SharpFrame.Math.Combinatorics.Combination,SH3H.SharpFrame.Math.Combinatorics.Combination)">
            <summary>Indicate whether 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>s are not equal.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence.</param>
            <returns><b>true</b> if supplied sequences are not equal;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.op_LessThan(SH3H.SharpFrame.Math.Combinatorics.Combination,SH3H.SharpFrame.Math.Combinatorics.Combination)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> is less than
            the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence.</param>
            <returns><b>true</b> if the left sequence is less than
            the right sequence; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.op_GreaterThanOrEqual(SH3H.SharpFrame.Math.Combinatorics.Combination,SH3H.SharpFrame.Math.Combinatorics.Combination)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> is greater than
            or equal to the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence.</param>
            <returns><b>true</b> if the left sequence is greater than or equal to
            the right sequence; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.op_GreaterThan(SH3H.SharpFrame.Math.Combinatorics.Combination,SH3H.SharpFrame.Math.Combinatorics.Combination)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> is greater than
            the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence.</param>
            <returns><b>true</b> if the left sequence is greater than
            the right sequence; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combination.op_LessThanOrEqual(SH3H.SharpFrame.Math.Combinatorics.Combination,SH3H.SharpFrame.Math.Combinatorics.Combination)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> is less than or equal
            to the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> sequence.</param>
            <returns><b>true</b> if the left sequence is less than or equal to
            the right sequence; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Choices">
            <summary>
            The available number of integers to choose from.
            </summary>
            <remarks>
            Also known as <em>n</em>.
            </remarks>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Picks">
            <summary>
            Number of elements in the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>.
            </summary>
            <remarks>
            Also known as <em>k</em>.
            </remarks>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Rank">
            <summary>
            Row index in the ordered <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> table.
            </summary>
            <remarks>
            Any assigned value out of range will be normalized to (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.RowCount"/>-1).
            </remarks>
            <example>
            <code source="Examples\Combination\CnExample04\CnExample04.cs" lang="cs"/>
            </example>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Combination.RowCount">
            <summary>
            Count of distinct sequences in the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> table.
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Item(System.Int32)">
            <summary>
            Get a element of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> at the supplied column.
            </summary>
            <param name="index">Zero-based index value.</param>
            <returns>Sequence value at <em>index</em>.</returns>
            <example>
            <code source="Examples\Combination\CnExample05\CnExample05.cs" lang="cs"/>
            </example>
            <exception cref="T:System.IndexOutOfRangeException">
            When <em>index</em> not in range (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Combination.Picks"/>-1).
            </exception>
        </member>
        <member name="T:SH3H.SharpFrame.Math.Combinatorics.Combinatoric">
            <summary>
            Provides static methods for combinatorics.
            </summary>
            <remarks>
            This class cannot be instantiated.
            </remarks>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combinatoric.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Returns the binomial coefficient of the supplied values.
            </summary>
            <param name="n">Number of choices.</param>
            <param name="k">Number of picks.</param>
            <returns>
            The binomial coefficient of <em>n</em> choose <em>k</em>.
            </returns>
            <remarks>
            The result is equal to row <em>n</em>, column <em>k</em> of Pascal's triangle
            with counting starting at 0.
            </remarks>
            <example>
            <para>
            The number of rows in a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/> table of <em>k</em> picks
            from <em>n</em> choices is:<br/>
            <br/>
            <c>Combinatoric.BinomialCoefficient (n, k)</c>
            </para>
            <para>
            The number of rows in a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> table of <em>k</em> picks
            from <em>n</em> choices is:<br/>
            <br/>
            <c>Combinatoric.BinomialCoefficient (k+n-1, k)</c>
            </para>
            <para>
            An exception to the above formulas is the special case where the numer of elements
            is 0. While mathematics treats this result as 1 row containing the empty product,
            this library returns 0 rows.
            </para>
            </example>
            <exception cref="T:System.OverflowException">When the numbers are just too big.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Combinatoric.Factorial(System.Int32)">
            <summary>Returns the factorial of the supplied value.</summary>
            <param name="value">Non-negative integer.</param>
            <returns>
            For increasing values starting at 0, returns
            1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 
            479001600, 6227020800, 87178291200, 1307674368000, 20922789888000,
            355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000.
            </returns>
            <example>
            <para>
            The number of rows in a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> table of <em>n</em> choices is:<br/>
            <br/>
            <c>Combinatoric.Factorial (n)</c><br/>
            <br/>
            The number of rows in a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> table of <em>k</em> picks
            from <em>n</em> choices is:<br/>
            <br/>
            <c>Combinatoric.Factorial (n) / Combinatoric.Factorial (n-k)</c>
            </para>
            <para>
            An exception to the above formulas is the special case where the number of elements
            in the permutation is 0. While mathematics treats this result as 1 row containing the
            empty product, this library returns 0 rows.
            </para>
            </example>
            <exception cref="T:System.IndexOutOfRangeException">
            When <em>value</em> not in range (0..20).
            </exception>
        </member>
        <member name="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination">
             <summary>
             Represents an ascending sequence of repeatable picks from a supplied number of choices.
             </summary>
             <remarks>
             <para>
             <em>k</em>-multicombinations are also known as pick-multicombinations or
             <em>k</em>-combinations with repetitions.
             
             The defining variables are <em>n</em> which is the number of possible choices and
             <em>k</em> which is the number of repeatable picks from those choices.
             
             This is contrasted to <em>k</em>-combinations where the picks may not repeat.
             </para>
             <para>
             The <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> class produces <em>k</em>-multicombinations with
             ascending elements that may repeat as many as <em>k</em> times. 
             
             While sequence order of the elements is not a requirement of <em>k</em>-multicombinations,
             producing an ascending sequence allows ranking the rows into an ordered table.
             </para>
             <para>
             Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Picks"/> property to get the number of elements (<em>k</em>)
             of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> taken from a possible number of
             <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Choices"/> (<em>n</em>).
             
             Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.RowCount"/> property to get the number of distinct possible
             <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequences.
             
             Use the <see cref="P:Kw.Combinatorics.Multicombination.Item(System.Int32)">indexer</see>
             to get a specified element of the sequence.
            
             Use the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.GetEnumerator">default enumerator</see> to iterate thru
             the elements of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>.
             
             Use the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Permute``1(SH3H.SharpFrame.Math.Combinatorics.Multicombination,System.Collections.Generic.IList{``0})">Permute</see> method to pick objects from a supplied array
             of choices based on the current sequence.
             </para>
             <para>
             Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Rank"/> property to get or set the row index in a lexicographically
             ordered <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> table of all possible non-descending sequences.
             
             Use <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.GetRows"/> to iterate thru all possible sequences of the
             <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> ordered by <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Rank"/>.
             
             Use <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.GetRowsForPicks(System.Int32,System.Int32)">GetRowsForPicks (startPick, stopPick)</see> to iterate
             thru every table of all picks in the range (<em>startPick</em>..<em>stopPick</em>).
             </para>
             <para>
             The default appearance of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> row is a list of
             integers (starting at 0) enclosed in braces. The appearance may be tailored 3 ways:
             <ul>
               <li>
                 Map each element to a different value using the
                 <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.GetEnumerator">default enumerator</see> or the
                 <see cref="P:Kw.Combinatorics.Multicombination.Item(System.Int32)">indexer</see>.
               </li>
               <li>
                 Use the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Permute``1(SH3H.SharpFrame.Math.Combinatorics.Multicombination,System.Collections.Generic.IList{``0})">Permute</see> method and output the rearranged values.
               </li>
               <li>
                 Define a subclass of <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> and override
                 <see cref="M:System.Object.ToString">ToString()</see>.
                 (See the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.GetRowsForPicks(System.Int32,System.Int32)">GetRowsForPicks</see> method
                 for an example.)
               </li>
             </ul>
             </para>
             <para>
             For more information about <em>k</em>-multicombinations, see:
             </para>
             <para>
             <em>http://en.wikipedia.org/wiki/Combination</em>
             </para>
             </remarks>
             <example>
             <para>
             Iterating thru <c>new Multicombination (4, 3).GetRows()</c> produces:
             </para>
             <para>
             <c>{ 0, 0, 0 }</c><br/>
             <c>{ 0, 0, 1 }</c><br/>
             <c>{ 0, 0, 2 }</c><br/>
             <c>{ 0, 0, 3 }</c><br/>
             <c>{ 0, 1, 1 }</c><br/>
             <c>{ 0, 1, 2 }</c><br/>
             <c>{ 0, 1, 3 }</c><br/>
             <c>{ 0, 2, 2 }</c><br/>
             <c>{ 0, 2, 3 }</c><br/>
             <c>{ 0, 3, 3 }</c><br/>
             <c>{ 1, 1, 1 }</c><br/>
             <c>{ 1, 1, 2 }</c><br/>
             <c>{ 1, 1, 3 }</c><br/>
             <c>{ 1, 2, 2 }</c><br/>
             <c>{ 1, 2, 3 }</c><br/>
             <c>{ 1, 3, 3 }</c><br/>
             <c>{ 2, 2, 2 }</c><br/>
             <c>{ 2, 2, 3 }</c><br/>
             <c>{ 2, 3, 3 }</c><br/>
             <c>{ 3, 3, 3 }</c>
             </para>
             </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.#ctor">
            <summary>
            Make an empty <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>.
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.#ctor(SH3H.SharpFrame.Math.Combinatorics.Multicombination)">
            <summary>
            Make a copy of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>.
            </summary>
            <param name="source">Instance to copy.</param>
            <exception cref="T:System.ArgumentNullException">When <em>source</em> is <b>null</b>.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.#ctor(System.Int32)">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> from the supplied
            <em>choices</em> of the same <em>Picks</em>.
            </summary>
            <param name="choices">Number of elements in the sequence.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <em>choices</em> less than 0.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.#ctor(System.Int32,System.Int32)">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> from the supplied
            <em>choices</em> and <em>picks</em> of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Rank"/> 0.
            </summary>
            <param name="choices">Number of values to pick from.</param>
            <param name="picks">Number of elements in the sequence.</param>
            <example>
            <code source="Examples\Multicombination\McExample01\McExample01.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When negative value supplied; when <em>choices</em> is zero and <em>picks</em> is nonzero.
            </exception>
            <exception cref="T:System.OverflowException">When the numbers are just too big.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.#ctor(System.Int32,System.Int32,System.Int64)">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> from the supplied
            <em>choices</em> and <em>picks</em> of the supplied <em>rank</em>.
            </summary>
            <remarks>
            If the supplied <em>rank</em> is out of the range (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.RowCount"/>-1),
            it will be normalized to the valid range. For example, a value of -1 will
            produce the last row in the ordered table.
            </remarks>
            <param name="choices">Number of values to pick from.</param>
            <param name="picks">Number of elements in the sequence.</param>
            <param name="rank">Initial row index in the ordered <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> table.</param>
            <example>
            <code source="Examples\Multicombination\McExample05\McExample05.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When negative value supplied; when <em>choices</em> is 0 and <em>picks</em> is not 0.
            </exception>
            <exception cref="T:System.OverflowException">When too many <em>choices</em>.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.#ctor(System.Int32,System.Int32[])">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> from the supplied elements.
            </summary>
            <param name="choices">Number of values to pick from.</param>
            <param name="source">Array of integers.</param>
            <example>
            <code source="Examples\Multicombination\McExample04\McExample04.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentNullException">When <em>source</em> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <em>source</em> contains invalid data;
            when <em>choices</em> is 0 and <em>source</em> is not empty.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.CompareTo(System.Object)">
            <summary>Compare two <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>s.</summary>
            <param name="obj">Target of the comparison.</param>
            <returns>
            A signed integer indicating the sort order of this instance to <em>obj</em>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.CompareTo(SH3H.SharpFrame.Math.Combinatorics.Multicombination)">
            <summary>Compare two <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>s.</summary>
            <param name="other">Target of the comparison.</param>
            <returns>
            A signed integer indicating the sort order of this instance to <em>other</em>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.CopyTo(System.Int32[])">
            <summary>
            Copy the entire sequence to the supplied destination.
            </summary>
            <param name="array">Destination of copy.</param>
            <exception cref="T:System.ArgumentNullException">When <em>array</em> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">When not enough space in <em>array</em>.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Equals(System.Object)">
            <summary>
            Indicate whether two <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>s have the same value.
            </summary>
            <param name="obj">Target of the comparison.</param>
            <returns>
            <b>true</b> if <em>obj</em> has the same value as this object; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Equals(SH3H.SharpFrame.Math.Combinatorics.Multicombination)">
            <summary>
            Indicate whether two <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>s have the same value.
            </summary>
            <param name="other">Target of the comparison.</param>
            <returns>
            <b>true</b> if <em>other</em> has the same value as this instance;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.System#Collections#IEnumerable#GetEnumerator">
            <summary>Get an object-based enumerator of the elements.</summary>
            <returns>Object-based elemental enumerator.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.GetEnumerator">
            <summary>Enumerate all elements of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>.</summary>
            <returns>
            An <c>IEnumerator&lt;int&gt;</c> for this <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>.
            </returns>
            <example>
            <code source="Examples\Multicombination\McExample05\McExample05.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.GetHashCode">
            <summary>Get the hash oode of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.GetRows">
            <summary>
            Iterate thru all rows of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> table
            for every value of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Rank"/> ascending.
            </summary>
            <returns>An iterator for a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> table.</returns>
            <remarks>
            If the start row is not of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Rank"/> 0, the iteration will wrap around
            so that <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.RowCount"/> items are always produced.
            </remarks>
            <example>
            <code source="Examples\Multicombination\McExample01\McExample01.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.GetRowsForPicks(System.Int32,System.Int32)">
            <summary>
            Iterate thru all rows of all <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> tables for every
            pick in the range (<em>startPicks</em>..<em>stopPicks</em>).
            </summary>
            <returns>An iterator for a series of <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> tables.</returns>
            <remarks>
            Unlike <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Combination"/>, <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Picks"/> may exceed <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Choices"/>.
            </remarks>
            <param name="startPicks">Number of picks for first table.</param>
            <param name="stopPicks">Number of picks for last table.</param>
            <example>
            <code source="Examples\Multicombination\McExample02\McExample02.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <em>startPicks</em> is less than 0 or greater than <em>stopPicks</em>.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.ToString">
            <summary>
            Provide a readable form of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence.
            </summary>
            <returns>A <c>string</c> that represents the sequence.</returns>
            <remarks>Result is enclosed in braces and separated by commas.</remarks>
            <example>
            <code source="Examples\Multicombination\McExample04\McExample04.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Permute``1(SH3H.SharpFrame.Math.Combinatorics.Multicombination,System.Collections.Generic.IList{``0})">
            <summary>
            Apply a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence to rearrange the supplied list or array.
            </summary>
            <typeparam name="T">Type of items to rearrange.</typeparam>
            <param name="arrangement">New arrangement for items.</param>
            <param name="source">List of items to rearrange.</param>
            <returns>List of rearranged items.</returns>
            <example>
            <code source="Examples\Multicombination\McExample03\McExample03.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentNullException">
            When <em>arrangement</em> or <em>source</em> is <b>null</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When length of <em>source</em> is less than <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Choices"/>.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.op_Equality(SH3H.SharpFrame.Math.Combinatorics.Multicombination,SH3H.SharpFrame.Math.Combinatorics.Multicombination)">
            <summary>Indicate whether 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>s are equal.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence.</param>
            <returns><b>true</b> if supplied sequences are equal;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.op_Inequality(SH3H.SharpFrame.Math.Combinatorics.Multicombination,SH3H.SharpFrame.Math.Combinatorics.Multicombination)">
            <summary>Indicate whether 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>s are not equal.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence.</param>
            <returns><b>true</b> if supplied sequences are not equal;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.op_LessThan(SH3H.SharpFrame.Math.Combinatorics.Multicombination,SH3H.SharpFrame.Math.Combinatorics.Multicombination)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> is less than
            the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence.</param>
            <returns><b>true</b> if the left sequence is less than
            the right sequence; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.op_GreaterThanOrEqual(SH3H.SharpFrame.Math.Combinatorics.Multicombination,SH3H.SharpFrame.Math.Combinatorics.Multicombination)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> is greater than
            or equal to the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence.</param>
            <returns><b>true</b> if the left sequence is greater than or equal to
            the right sequence; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.op_GreaterThan(SH3H.SharpFrame.Math.Combinatorics.Multicombination,SH3H.SharpFrame.Math.Combinatorics.Multicombination)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> is greater than
            the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence.</param>
            <returns><b>true</b> if the left sequence is greater than
            the right sequence; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Multicombination.op_LessThanOrEqual(SH3H.SharpFrame.Math.Combinatorics.Multicombination,SH3H.SharpFrame.Math.Combinatorics.Multicombination)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> is less than
            or equal to the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> sequence.</param>
            <returns><b>true</b> if the left sequence is less than or equal to
            the right sequence; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Choices">
            <summary>
            The available number of integers to choose from.
            </summary>
            <remarks>
            Also known as <em>n</em>.
            </remarks>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Picks">
            <summary>
            Number of elements in the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/>.
            </summary>
            <remarks>
            Also known as <em>k</em>.
            </remarks>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Rank">
            <summary>
            Row index in the ordered <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> table.
            </summary>
            <remarks>
            Any assigned value out of range will be normalized to (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.RowCount"/>-1).
            </remarks>
            <example>
            <code source="Examples\Multicombination\McExample04\McExample04.cs" lang="cs"/>
            </example>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.RowCount">
            <summary>
            Count of distinct sequences in the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> table.
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Item(System.Int32)">
            <summary>
            Get a element of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Multicombination"/> at the supplied column.
            </summary>
            <param name="index">Zero-based index value.</param>
            <returns>Sequence value at <em>index</em>.</returns>
            <example>
            <code source="Examples\Multicombination\McExample05\McExample05.cs" lang="cs"/>
            </example>
            <exception cref="T:System.IndexOutOfRangeException">
            When <em>index</em> not in range (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Multicombination.Picks"/>-1).
            </exception>
        </member>
        <member name="T:SH3H.SharpFrame.Math.Combinatorics.Permutation">
            <summary>
            Represents an arrangement of distinct values taken from a supplied number of choices.
            </summary>
            <remarks>
            <para>
            Unlike combinations, the arrangement of the elements of a permutation is significant.
            
            Permutations typically contain all of the available choices. In contrast,
            <em>k</em>-permutations contain arrangements that pick fewer elements than the
            available choices. 
            </para>
            <para>
            The <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> class uses the inherent sequencing of the elements
            to arrange the rows into an lexicographically ordered table.
            
            Support for <em>k</em>-permutations is provided by supplying a <em>picks</em> value
            that is less than the supplied <em>choices</em> value to the appropriate constructors.
            </para>
            <para>
            Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Choices"/> property to get the number of elements to choose from.
            
            Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Picks"/> property to get the number of elements of a
            <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.
            
            Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.RowCount"/> property to get the number of distinct possible
            sequences of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.
            
            Use the <see cref="P:Kw.Combinatorics.Permutation.Item(System.Int32)">indexer</see>
            to get a specified element of the sequence.
            
            Use the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetEnumerator">default enumerator</see> to iterate thru
            the elements of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.
            
            Use the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.Permute``1(SH3H.SharpFrame.Math.Combinatorics.Permutation,System.Collections.Generic.IList{``0})">Permute</see> method to
            rearrange a supplied array based on the current sequence.
            </para>
            <para>
            Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Rank"/> property to get or set the row index in a lexicographically
            ordered <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> table of all possible sequences.
            
            Use <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetRows"/> to iterate thru all possible sequences
            of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> ordered by <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Rank"/>.
            
            Use <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetRowsForAllChoices"/> to iterate
            thru every table of all choices in the range (1..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Choices"/>).
            
            Use <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetRowsForAllPicks"/> to iterate
            thru every table of all picks in the range (1..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Picks"/>).
            </para>
            <para>
            Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.PlainRank"/> property to get or set the row index in a table
            ordered for plain changes where adjacent rows differ by only a single swap of
            2 adjacent elements.
            
            Use <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetRowsOfPlainChanges"/> to iterate thru all possible sequences
            of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> ordered by <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.PlainRank"/>.
            </para>
            <para>
            Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Swaps"/> property to get the number of element swaps that would
            transform a row into the sequence of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Rank"/> 0.
            
            Use the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.Backtrack(System.Int32)">Backtrack</see> method to minimally advance
            <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Rank"/> while changing a specified element.
            </para>
            <para>
            The default appearance of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> row is a list of integers
            (starting at 0) enclosed in braces. The appearance may be tailored 3 ways:
            <ul>
              <li>
                Map each element to a different value using the
                <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetEnumerator">default enumerator</see> or the
                <see cref="P:Kw.Combinatorics.Permutation.Item(System.Int32)">indexer</see>.
              </li>
              <li>
                Use the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.Permute``1(SH3H.SharpFrame.Math.Combinatorics.Permutation,System.Collections.Generic.IList{``0})">Permute</see> method and output the rearranged values.
              </li>
              <li>
                Define a subclass of <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> and override
                <see cref="M:System.Object.ToString">ToString()</see>.
                (See <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetRowsForAllPicks"/> for an example.)
              </li>
            </ul>
            </para>
            <para>
            For more information about permutations and <em>k</em>-permutations, see:
            </para>
            <para>
            <em>http://en.wikipedia.org/wiki/Permutation</em><br/>
            <em>http://en.wikipedia.org/wiki/Eight_queens_puzzle</em>
            </para>
            </remarks>
            <example>
            <para>
            Iterating thru <c>new Permutation (4).GetRows()</c> produces:
            </para>
            <para>
            <c>{ 0, 1, 2, 3 }</c><br/>
            <c>{ 0, 1, 3, 2 }</c><br/>
            <c>{ 0, 2, 1, 3 }</c><br/>
            <c>{ 0, 2, 3, 1 }</c><br/>
            <c>{ 0, 3, 1, 2 }</c><br/>
            <c>{ 0, 3, 2, 1 }</c><br/>
            <c>{ 1, 0, 2, 3 }</c><br/>
            <c>{ 1, 0, 3, 2 }</c><br/>
            <c>{ 1, 2, 0, 3 }</c><br/>
            <c>{ 1, 2, 3, 0 }</c><br/>
            <c>{ 1, 3, 0, 2 }</c><br/>
            <c>{ 1, 3, 2, 0 }</c><br/>
            <c>{ 2, 0, 1, 3 }</c><br/>
            <c>{ 2, 0, 3, 1 }</c><br/>
            <c>{ 2, 1, 0, 3 }</c><br/>
            <c>{ 2, 1, 3, 0 }</c><br/>
            <c>{ 2, 3, 0, 1 }</c><br/>
            <c>{ 2, 3, 1, 0 }</c><br/>
            <c>{ 3, 0, 1, 2 }</c><br/>
            <c>{ 3, 0, 2, 1 }</c><br/>
            <c>{ 3, 1, 0, 2 }</c><br/>
            <c>{ 3, 1, 2, 0 }</c><br/>
            <c>{ 3, 2, 0, 1 }</c><br/>
            <c>{ 3, 2, 1, 0 }</c>
            </para>
            <para>
            Iterating thru <c>new Permutation (4, 3).GetRows()</c> produces:
            </para>
            <para>
            <c>{ 0, 1, 2 }</c><br/>
            <c>{ 0, 1, 3 }</c><br/>
            <c>{ 0, 2, 1 }</c><br/>
            <c>{ 0, 2, 3 }</c><br/>
            <c>{ 0, 3, 1 }</c><br/>
            <c>{ 0, 3, 2 }</c><br/>
            <c>{ 1, 0, 2 }</c><br/>
            <c>{ 1, 0, 3 }</c><br/>
            <c>{ 1, 2, 0 }</c><br/>
            <c>{ 1, 2, 3 }</c><br/>
            <c>{ 1, 3, 0 }</c><br/>
            <c>{ 1, 3, 2 }</c><br/>
            <c>{ 2, 0, 1 }</c><br/>
            <c>{ 2, 0, 3 }</c><br/>
            <c>{ 2, 1, 0 }</c><br/>
            <c>{ 2, 1, 3 }</c><br/>
            <c>{ 2, 3, 0 }</c><br/>
            <c>{ 2, 3, 1 }</c><br/>
            <c>{ 3, 0, 1 }</c><br/>
            <c>{ 3, 0, 2 }</c><br/>
            <c>{ 3, 1, 0 }</c><br/>
            <c>{ 3, 1, 2 }</c><br/>
            <c>{ 3, 2, 0 }</c><br/>
            <c>{ 3, 2, 1 }</c>
            </para>
            <para>
            Iterating thru <c>new Permutation (4).GetRowsOfPlainChanges()</c> produces:
            </para>
            <para>
            <c>{ 0, 1, 2, 3 }</c><br/>
            <c>{ 0, 1, 3, 2 }</c><br/>
            <c>{ 0, 3, 1, 2 }</c><br/>
            <c>{ 3, 0, 1, 2 }</c><br/>
            <c>{ 3, 0, 2, 1 }</c><br/>
            <c>{ 0, 3, 2, 1 }</c><br/>
            <c>{ 0, 2, 3, 1 }</c><br/>
            <c>{ 0, 2, 1, 3 }</c><br/>
            <c>{ 2, 0, 1, 3 }</c><br/>
            <c>{ 2, 0, 3, 1 }</c><br/>
            <c>{ 2, 3, 0, 1 }</c><br/>
            <c>{ 3, 2, 0, 1 }</c><br/>
            <c>{ 3, 2, 1, 0 }</c><br/>
            <c>{ 2, 3, 1, 0 }</c><br/>
            <c>{ 2, 1, 3, 0 }</c><br/>
            <c>{ 2, 1, 0, 3 }</c><br/>
            <c>{ 1, 2, 0, 3 }</c><br/>
            <c>{ 1, 2, 3, 0 }</c><br/>
            <c>{ 1, 3, 2, 0 }</c><br/>
            <c>{ 3, 1, 2, 0 }</c><br/>
            <c>{ 3, 1, 0, 2 }</c><br/>
            <c>{ 1, 3, 0, 2 }</c><br/>
            <c>{ 1, 0, 3, 2 }</c><br/>
            <c>{ 1, 0, 2, 3 }</c>
            </para>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.#ctor">
            <summary>
            Make an empty <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.#ctor(SH3H.SharpFrame.Math.Combinatorics.Permutation)">
            <summary>
            Make a copy of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.
            </summary>
            <param name="source">Instance to copy.</param>
            <exception cref="T:System.ArgumentNullException">When <em>source</em> is <b>null</b>.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.#ctor(System.Int32)">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> of all the supplied number of
            <em>choices</em> with a <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Rank"/> of 0.
            </summary>
            <param name="choices">Number of elements in the sequence.</param>
            <example>
            <code source="Examples\Permutation\PnExample01\PnExample01.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <em>choices</em> is less than 0 or greater than 20.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.#ctor(System.Int32,System.Int32)">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> with <em>picks</em> number of elements taken
            from a possible number of <em>choices</em> of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Rank"/> 0.
            </summary>
            <param name="choices">Number of values to choose from.</param>
            <param name="picks">Number of elements in the sequence.</param>
            <example>
            <code source="Examples\Permutation\PnExample06\PnExample06.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <em>picks</em> less than 0, greater than 20, or greater than <em>choices</em>;
            when <em>choices</em> greater than 20.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.#ctor(System.Int32,System.Int32,System.Int64)">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> with <em>picks</em> number of elements taken
            from a possible number of <em>choices</em> of the supplied <em>rank</em>.
            </summary>
            <remarks>
            If the supplied <em>rank</em> is out of the range (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.RowCount"/>-1),
            it will be normalized to the valid range. For example, a value of -1 will
            produce the last row in the ordered table.
            </remarks>
            <param name="choices">Number of values to choose from.</param>
            <param name="picks">Number of elements in the sequence.</param>
            <param name="rank">Initial row index in the lexicographically ordered <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> table.</param>
            <example>
            <code source="Examples\Permutation\PnExample05\PnExample05.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <em>picks</em> less than 0 or greater than <em>choices</em>;
            when <em>choices</em> greater than 20.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.#ctor(System.Int32[])">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> from the supplied elements.
            </summary>
            <param name="source">Array of integers.</param>
            <example>
            <code source="Examples\Permutation\PnExample04\PnExample04.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentNullException">When <em>source</em> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When length of <em>source</em> is greater than 20 or contains invalid data;
            When <em>source</em> contains out of range values.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <em>source</em> contains repeated values.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.#ctor(System.Int32[],System.Int32)">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> from the supplied elements taken from the
            available number of <em>choices</em>.
            </summary>
            <remarks>
            Supplying a value for <em>choices</em> that is greater than the number of
            elements in <em>source</em> will create a <em>k</em>-permutation.
            </remarks>
            <param name="source">Array of integers with elements in the range (0..<em>choices</em>-1).</param>
            <param name="choices">Number of values that <em>source</em> may pick from.</param>
            <exception cref="T:System.ArgumentNullException">When <em>source</em> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When length of <em>source</em> is greater than 20 or contains invalid data;
            When <em>source</em> contains out of range values;
            When <em>choices</em> is less than 0 or greater than 20.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <em>source</em> contains repeated values.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.Backtrack(System.Int32)">
            <summary>
            Advance <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Rank"/> a minimum while changing element at <em>nodeIndex</em>.
            </summary>
            <returns>Lowest index of actual changed element if successful; else <b>-1</b>.</returns>
            <remarks>
            This method provides support for backtracking algorithms by pruning permutations that
            cannot be completed to a solution.
            </remarks>
            <param name="nodeIndex">Element to change.</param>
            <example>
            <code source="Examples\Queens\PnBacktrack\PnBacktrack.cs" lang="cs"/>
            </example>
            <exception cref="T:System.InvalidOperationException">
            When <em>Choices</em> not equal to <em>Picks</em>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When <em>nodeIndex</em> not in range (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Picks"/>-1).
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.CompareTo(System.Object)">
            <summary>Compare 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>s.</summary>
            <param name="obj">Target of the comparison.</param>
            <returns>A signed integer indicating the sort order of this instance to <em>obj</em>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.CompareTo(SH3H.SharpFrame.Math.Combinatorics.Permutation)">
            <summary>Compare 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>s.</summary>
            <param name="other">Target of the comparison.</param>
            <returns>A signed integer indicating the sort order of this instance to <em>other</em>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.CopyTo(System.Int32[])">
            <summary>
            Copy the entire sequence to the supplied destination.
            </summary>
            <param name="array">Destination of copy.</param>
            <exception cref="T:System.ArgumentNullException">When <em>array</em> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">When not enough space in <em>array</em>.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.Equals(System.Object)">
            <summary>
            Indicate whether 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>s have the same value.
            </summary>
            <param name="obj">Target of the comparison.</param>
            <returns>
            <b>true</b> if <em>obj</em> has the same value as this object; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.Equals(SH3H.SharpFrame.Math.Combinatorics.Permutation)">
            <summary>
            Indicate whether 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>s have the same value.
            </summary>
            <param name="other">Target of the comparison.</param>
            <returns>
            <b>true</b> if <em>other</em> has the same value as this instance;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.System#Collections#IEnumerable#GetEnumerator">
            <summary>Get an object-based enumerator of the elements.</summary>
            <returns>Object-based elemental enumerator.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetEnumerator">
            <summary>Enumerate all elements of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</summary>
            <returns>
            An <c>IEnumerator&lt;int&gt;</c> for this <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.
            </returns>
            <example>
            <code source="Examples\Permutation\PnExample05\PnExample05.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetHashCode">
            <summary>Get the hash oode of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetRows">
            <summary>
            Iterate thru all rows of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> table
            for every value of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Rank"/> ascending.
            </summary>
            <returns>An iterator for a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> table.</returns>
            <remarks>
            If the start row is not of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Rank"/> 0, the iteration will wrap around
            so that <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.RowCount"/> items are always produced.
            </remarks>
            <example>
            <code source="Examples\Permutation\PnExample01\PnExample01.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetRowsForAllChoices">
            <summary>
            Iterate thru all rows of all <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> tables for every
            <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Choices"/> value in the range (1..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Choices"/>).
            </summary>
            <returns>An iterator for a series of <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> tables.</returns>
            <example>
            <code source="Examples\Permutation\PnExample02\PnExample02.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetRowsForAllPicks">
            <summary>
            Iterate thru all rows of all <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> tables for every
            <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Picks"/> value in the range (1..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Picks"/>).
            </summary>
            <returns>An iterator for a series of <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> tables.</returns>
            <example>
            <code source="Examples\Permutation\PnExample02\PnExample02.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetRowsOfPlainChanges">
            <summary>
            Iterate thru all rows of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> table
            while swapping only 2 values in each result.
            </summary>
            <returns>An iterator for a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> table.</returns>
            <remarks>
            <para>
            The results of this iterator are commonly known as "plain changes".
            </para>
            <para>
            Usage note:
            <ul>
              <li>
                Using this iterator will not perform as fast as using a class that is
                designed and optimized for generating plain changes without the overhead
                of calculating the lexicographical rank for each row.
              </li>
            </ul>
            </para>
            </remarks>
            <example>
            <code source="Examples\Permutation\PnExample07\PnExample07.cs" lang="cs"/>
            </example>
            <exception cref="T:System.InvalidOperationException">
            When <em>Choices</em> not equal to <em>Picks</em>.
            </exception>
            <seealso cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.PlainRank"/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.ToString">
            <summary>
            Provide a readable form of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> sequence.
            </summary>
            <returns>A <b>string</b> that represents the sequence.</returns>
            <remarks>Result is enclosed in braces and separated by commas.</remarks>
            <example>
            <code source="Examples\Permutation\PnExample04\PnExample04.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.Permute``1(SH3H.SharpFrame.Math.Combinatorics.Permutation,System.Collections.Generic.IList{``0})">
            <summary>
            Apply a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> sequence to rearrange the supplied list or array.
            </summary>
            <typeparam name="T">Type of items to rearrange.</typeparam>
            <param name="arrangement">New arrangement for items.</param>
            <param name="source">list of items to rearrange.</param>
            <returns>Rearranged objects.</returns>
            <example>
            <code source="Examples\Permutation\PnExample03\PnExample03.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentNullException">When <em>arrangement</em> or <em>source</em> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When length of
            <em>source</em> is less than <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Picks"/>.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.op_Equality(SH3H.SharpFrame.Math.Combinatorics.Permutation,SH3H.SharpFrame.Math.Combinatorics.Permutation)">
            <summary>Indicate whether 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>s are equal.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</param>
            <returns><b>true</b> if supplied <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>s are equal;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.op_Inequality(SH3H.SharpFrame.Math.Combinatorics.Permutation,SH3H.SharpFrame.Math.Combinatorics.Permutation)">
            <summary>Indicate whether 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>s are not equal.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</param>
            <returns><b>true</b> if supplied sequences are not equal;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.op_LessThan(SH3H.SharpFrame.Math.Combinatorics.Permutation,SH3H.SharpFrame.Math.Combinatorics.Permutation)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> is less than
            the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</param>
            <returns><b>true</b> if the left sequence is less than
            the right sequence otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.op_GreaterThanOrEqual(SH3H.SharpFrame.Math.Combinatorics.Permutation,SH3H.SharpFrame.Math.Combinatorics.Permutation)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> is greater than
            or equal to the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</param>
            <returns><b>true</b> if the left sequence is greater than or equal to
            the right sequence otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.op_GreaterThan(SH3H.SharpFrame.Math.Combinatorics.Permutation,SH3H.SharpFrame.Math.Combinatorics.Permutation)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> is greater than
            the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</param>
            <returns><b>true</b> if the left sequence is greater than
            the right sequence otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.op_LessThanOrEqual(SH3H.SharpFrame.Math.Combinatorics.Permutation,SH3H.SharpFrame.Math.Combinatorics.Permutation)">
            <summary>Indicate whether the left permutation is less than or equal to
            the right permutation.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.</param>
            <returns><b>true</b> if the left sequence is less than or equal to
            the right sequence otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Choices">
            <summary>Number of available choices for the elements of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.
            </summary>
            <remarks>
            If no <em>picks</em> value was specified when constructing this
            <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>, then this is also the number of elements.
            </remarks>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Picks">
            <summary>Number of elements in the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.
            </summary>
            <remarks>
            Also known as <em>k</em>. If value is less than <em>Choices</em>,
            then this is a <em>k</em>-permutation.
            </remarks>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.PlainRank">
            <summary>
            Row index of the sequence in the plain ordered <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> table.
            </summary>
            <remarks>
            <para>
            Plain changes produces a table where adjacent rows differ by only a single swap of
            2 adjacent elements. The table always begins with the same row that begins the
            lexicographically ordered table of the same <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Choices"/>.
            </para>
            <para>
            Any assigned value out of range will be normalized to (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.RowCount"/>-1).
            </para>
            </remarks>
            <example>
            <code source="Examples\Permutation\PnExample07\PnExample07.cs" lang="cs"/>
            </example>
            <exception cref="T:System.InvalidOperationException">
            When <em>Choices</em> not equal to <em>Picks</em>.
            </exception>
            <seealso cref="M:SH3H.SharpFrame.Math.Combinatorics.Permutation.GetRowsOfPlainChanges"/>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Rank">
            <summary>
            Row index of the sequence in the lexicographically ordered
            <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> table.
            </summary>
            <remarks>
            Any assigned value out of range will be normalized to (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.RowCount"/>-1).
            </remarks>
            <example>
            <code source="Examples\Permutation\PnExample04\PnExample04.cs" lang="cs"/>
            </example>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.RowCount">
            <summary>
            Returns number of distinct possible arrangements of this <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Swaps">
            <summary>
            Returns number of element swaps needed to transform this <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>
            into <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Rank"/> 0.
            </summary>
            <remarks>
            <para>
            If additional swaps are applied resulting again in a row of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Rank"/> 0,
            those additional swaps will always be a multiple of 2.
            </para>
            <para>
            Any <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> with a <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Rank"/> of 0 always has a
            <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.PlainRank"/> of 0.
            </para>
            </remarks>
            <example>
            <code source="Examples\Permutation\PnExample07\PnExample07.cs" lang="cs"/>
            </example>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Item(System.Int32)">
            <summary>
            Get an element of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/> at the supplied column.
            </summary>
            <param name="index">Index value.</param>
            <returns>Sequence value at <em>index</em>.</returns>
            <example>
            <code source="Examples\Permutation\PnExample05\PnExample05.cs" lang="cs"/>
            </example>
            <exception cref="T:System.IndexOutOfRangeException">
            When <em>index</em> not in range (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.Picks"/>-1).
            </exception>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Permutation.MaxChoices">
            <summary>
            Returns the maximum number of elements that may be in a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>.
            </summary>
            <returns>
            The maximum number of elements that may be in any <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Permutation"/>
            due to Int64 computational limitations.
            </returns>
        </member>
        <member name="T:SH3H.SharpFrame.Math.Combinatorics.Product">
             <summary>
             Represents a join of values taken from a supplied array of ranges.
             </summary>
             <remarks>
             <para>
             A cartesian product is a set of sets where each subset is constructed by picking
             1 element from each of a given number of sets. This process of joining elements to
             form new sets is repeated until all possible distinct joins are made.
             </para>
             <para>
             The <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> class uses an array of integers as input where each integer
             is the size of each of the composing sets. The joined sets are represented as rows in
             a table where each element is a value in the range of these supplied sizes. Rows are
             constructed by looping thru the rightmost ranges fastest so that the resulting table
             is lexicographically ordered.
             </para>
             <para>
             Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Product.Width"/> property to get the number of joined elements.
             
             Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Product.RowCount"/> property to get the number of distinct joins
             in the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> table.
            
             Use the <see cref="P:Kw.Combinatorics.Product.Item(System.Int32)">indexer</see>
             to get an element of the row.
             
             Use the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Product.GetEnumerator">default enumerator</see> to iterate thru
             the elements of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> row.
            
             Use the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Product.Permute``1(SH3H.SharpFrame.Math.Combinatorics.Product,System.Collections.Generic.IList{System.Collections.Generic.IList{``0}})">Permute</see>
             method to rearrange a supplied list based on the values in a row.
             </para>
             <para>
             Use the <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Product.Rank"/> property to get or set the row index in the ordered
             <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> table of joins.
             
             Use <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Product.GetRows"/> to iterate thru all possible joins
              of the<see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> ordered by <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Product.Rank"/>.
             </para>
             <para>
             The default appearance of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> row is a list of integers
             (starting at 0) enclosed in braces. The appearance may be tailored 3 ways:
             <ul>
               <li>
                 Map each element to a different value using the
                 <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Product.GetEnumerator">default enumerator</see> or the
                 <see cref="P:Kw.Combinatorics.Product.Item(System.Int32)">indexer</see>.
               </li>
               <li>
                 Use the <see cref="M:SH3H.SharpFrame.Math.Combinatorics.Product.Permute``1(SH3H.SharpFrame.Math.Combinatorics.Product,System.Collections.Generic.IList{System.Collections.Generic.IList{``0}})">Permute</see> method and output the rearranged values.
               </li>
               <li>
                 Define a subclass of <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> and override
                 <see cref="M:System.Object.ToString">ToString()</see>.
               </li>
             </ul>
             </para>
             <para>
             For more information about cartesian products, see:
             </para>
             <para>
             <em>http://en.wikipedia.org/wiki/Cartesian_product</em>
             </para>
             </remarks>
             <example>
             <para>
             Iterating thru <c>new Product (new int[] { 2, 3, 2 }).GetRows()</c> produces:
             </para>
             <para>
             <c>{ 0, 0, 0 }</c><br/>
             <c>{ 0, 0, 1 }</c><br/>
             <c>{ 0, 1, 0 }</c><br/>
             <c>{ 0, 1, 1 }</c><br/>
             <c>{ 0, 2, 0 }</c><br/>
             <c>{ 0, 2, 1 }</c><br/>
             <c>{ 1, 0, 0 }</c><br/>
             <c>{ 1, 0, 1 }</c><br/>
             <c>{ 1, 1, 0 }</c><br/>
             <c>{ 1, 1, 1 }</c><br/>
             <c>{ 1, 2, 0 }</c><br/>
             <c>{ 1, 2, 1 }</c>
             </para>
             </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.#ctor">
            <summary>
            Make an empty <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>.
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.#ctor(SH3H.SharpFrame.Math.Combinatorics.Product)">
            <summary>
            Make a copy of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>.
            </summary>
            <param name="source">Instance to copy.</param>
            <exception cref="T:System.ArgumentNullException">When <em>source</em> is <b>null</b>.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.#ctor(System.Int32[])">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> from the supplied
            column <em>sizes</em> of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Product.Rank"/> 0.
            </summary>
            <param name="sizes">Size of each column.</param>
            <example>
            <code source="Examples\Product\PtExample01\PtExample01.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentNullException">
            When <em>sizes</em> is <b>null</b>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When any column size less than 0.
            </exception>
            <exception cref="T:System.OverflowException">
            When product is too big.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.#ctor(System.Int32[],System.Int64)">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> from the supplied column <em>sizes</em> of the
            supplied <em>rank</em>.
            </summary>
            <remarks>
            If the supplied <em>rank</em> is out of the range (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Product.RowCount"/>-1),
            it will be normalized to the valid range. For example, a value of -1 will
            produce the last row in the ordered table.
            </remarks>
            <param name="sizes">Size of each column.</param>
            <param name="rank">Initial row index.</param>
            <exception cref="T:System.ArgumentNullException">When <em>sizes</em> is <b>null</b>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When any column size less than 0.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Make a new <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> of the supplied column <em>sizes</em>
            from the supplied values.
            </summary>
            <param name="sizes">Size of each column.</param>
            <param name="source">Integer values for the columns.</param>
            <example>
            <code source="Examples\Product\PtExample04\PtExample04.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentNullException">
            When <em>sizes</em> or <em>source</em> is <b>null</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            When <em>source</em> length does not match <em>sizes</em> length.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When any column size less than 0. When <em>source</em> data is not valid.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.CompareTo(System.Object)">
            <summary>Compare 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>s.</summary>
            <param name="obj">Target of the comparison.</param>
            <returns>
            A signed integer indicating the sort order of this instance to <em>obj</em>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.CompareTo(SH3H.SharpFrame.Math.Combinatorics.Product)">
            <summary>Compare 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>s.</summary>
            <param name="other">Target of the comparison.</param>
            <returns>
            A signed integer indicating the sort order of this instance to <em>other</em>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.CopyTo(System.Int32[])">
            <summary>
            Copy the entire sequence to the supplied destination.
            </summary>
            <param name="array">Destination of copy.</param>
            <exception cref="T:System.ArgumentNullException">When <em>array</em> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">When not enough space in <em>array</em>.</exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.Equals(System.Object)">
            <summary>
            Indicate whether 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>s have the same value.
            </summary>
            <param name="obj">Target of the comparison.</param>
            <returns>
            <b>true</b> if <em>obj</em> has the same value as this object; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.Equals(SH3H.SharpFrame.Math.Combinatorics.Product)">
            <summary>
            Indicate whether 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>s have the same value.
            </summary>
            <param name="other">Target of the comparison.</param>
            <returns>
            <b>true</b> if <em>other</em> has the same value as this object;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.System#Collections#IEnumerable#GetEnumerator">
            <summary>Get an object-based enumerator of the elements.</summary>
            <returns>Object-based elemental enumerator.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.GetEnumerator">
            <summary>Enumerate all elements of a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>.</summary>
            <returns>
            An <c>IEnumerator&lt;int&gt;</c> for this <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>.
            </returns>
            <example>
            <code source="Examples\Product\PtExample05\PtExample05.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.GetHashCode">
            <summary>Get the hash oode of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.GetRows">
            <summary>
            Iterate thru all rows of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> table for 
            for every value of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Product.Rank"/> ascending.
            </summary>
            <returns>An iterator for a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> table.</returns>
            <remarks>
            If the start row is not of <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Product.Rank"/> 0, the iteration will wrap around
            so that <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Product.RowCount"/> items are always produced.
            </remarks>
            <example>
            <code source="Examples\Product\PtExample01\PtExample01.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.Size(System.Int32)">
            <summary>
            Get the size of a column.
            </summary>
            <param name="column">Column index.</param>
            <returns>Number of distinct values (starting at 0) that a column may take.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            When <em>column</em> not in range (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Product.Width"/>-1).
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.ToString">
            <summary>
            Provide readable form of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> row.
            </summary>
            <returns>A <c>string</c> that represents the sequence.</returns>
            <remarks>Result is enclosed in braces and separated by commas.</remarks>
            <example>
            <code source="Examples\Product\PtExample04\PtExample04.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.Permute``1(SH3H.SharpFrame.Math.Combinatorics.Product,System.Collections.Generic.IList{System.Collections.Generic.IList{``0}})">
            <summary>
            Apply a <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> sequence to select from the supplied lists or arrays.
            </summary>
            <typeparam name="T">Type of items to rearrange.</typeparam>
            <param name="arrangement">New arrangement for items.</param>
            <param name="source">List of List of Items or arrays to rarrange.</param>
            <returns>List of rearranged items.</returns>
            <example>
            <code source="Examples\Product\PtExample03\PtExample03.cs" lang="cs"/>
            </example>
            <exception cref="T:System.ArgumentNullException">When <em>arrangement</em> or <em>source</em> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">When not enough source sets.</exception>
            <exception cref="T:System.IndexOutOfRangeException">
            When supplied source list is too small.
            </exception>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.op_Equality(SH3H.SharpFrame.Math.Combinatorics.Product,SH3H.SharpFrame.Math.Combinatorics.Product)">
            <summary>Indicate whether 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>s are equal.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> sequence.</param>
            <returns><b>true</b> if supplied sequences are equal;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.op_Inequality(SH3H.SharpFrame.Math.Combinatorics.Product,SH3H.SharpFrame.Math.Combinatorics.Product)">
            <summary>Indicate whether 2 <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>s are not equal.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> sequence.</param>
            <returns><b>true</b> if supplied sequences are not equal;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.op_LessThan(SH3H.SharpFrame.Math.Combinatorics.Product,SH3H.SharpFrame.Math.Combinatorics.Product)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> is less than
            the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> sequence.</param>
            <returns><b>true</b> if the left sequence is less than
            the right sequence otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.op_GreaterThanOrEqual(SH3H.SharpFrame.Math.Combinatorics.Product,SH3H.SharpFrame.Math.Combinatorics.Product)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> is greater than
            or equal to the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> sequence.</param>
            <returns><b>true</b> if the left sequence is greater than or
            equal to the right sequence otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.op_GreaterThan(SH3H.SharpFrame.Math.Combinatorics.Product,SH3H.SharpFrame.Math.Combinatorics.Product)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> is greater than
            the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> sequence.</param>
            <returns><b>true</b> if the left sequence is greater than
            the right sequence otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Combinatorics.Product.op_LessThanOrEqual(SH3H.SharpFrame.Math.Combinatorics.Product,SH3H.SharpFrame.Math.Combinatorics.Product)">
            <summary>Indicate whether the left <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> is less than or equal to
            the right <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>.</summary>
            <param name="param1">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> sequence.</param>
            <param name="param2">A <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> sequence.</param>
            <returns><b>true</b> if the left sequence is less than or equal to
            the right sequence otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Product.Rank">
            <summary>
            Row index of the join in the lexicographically ordered <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> table.
            </summary>
            <remarks>
            Any assigned value out of range will be normalized to (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Product.RowCount"/>-1).
            </remarks>
            <example>
            <code source="Examples\Product\PtExample04\PtExample04.cs" lang="cs"/>
            </example>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Product.RowCount">
            <summary>
            Count of distinct joins in the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> table.
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Product.Width">
            <summary>
            Number of columns in the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/>.
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Combinatorics.Product.Item(System.Int32)">
            <summary>
            Get an element of the <see cref="T:SH3H.SharpFrame.Math.Combinatorics.Product"/> at the supplied column.
            </summary>
            <param name="index">Index value.</param>
            <returns>Sequence value at <em>index</em>.</returns>
            <example>
            <code source="Examples\Product\PtExample05\PtExample05.cs" lang="cs"/>
            </example>
            <exception cref="T:System.IndexOutOfRangeException">
            When <em>index</em> not in range (0..<see cref="P:SH3H.SharpFrame.Math.Combinatorics.Product.Width"/>-1).
            </exception>
            <exception cref="T:System.DivideByZeroException">
            When <see cref="P:SH3H.SharpFrame.Math.Combinatorics.Product.RowCount"/> is 0.
            </exception>
        </member>
        <member name="T:SH3H.SharpFrame.Math.Curve">
            <summary>
            定义曲线对象。曲线由两个浮点型数据X，Y组成
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Curve.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            构造函数
            </summary>
            <param name="arrayX">X列数据</param>
            <param name="arrayY">Y列数据</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Curve.Add(System.Double,System.Double)">
            <summary>
            向曲线中添加元素
            </summary>
            <param name="x">曲线X值</param>
            <param name="y">曲线Y值</param>        
        </member>
        <member name="M:SH3H.SharpFrame.Math.Curve.Add(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            向曲线中添加元素
            </summary>
            <param name="arrayX">X列数据</param>
            <param name="arrayY">Y列数据</param>        
        </member>
        <member name="M:SH3H.SharpFrame.Math.Curve.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SH3H.SharpFrame.Math.CurveElement">
            <summary>
            定义曲线元素对象
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.CurveElement.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="x">曲线X值</param>
            <param name="y">曲线Y值</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.CurveElement.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.CurveElement.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.CurveElement.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SH3H.SharpFrame.Math.CurveElement.X">
            <summary>
            获取或设置曲线X值
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.CurveElement.Y">
            <summary>
            获取或设置曲线Y值
            </summary>
        </member>
        <member name="T:SH3H.SharpFrame.Math.TimeRepeatAction">
            <summary>
            当向时间线对象中添加时间点时，如果时间点重复时的处理方式
            </summary>
        </member>
        <member name="F:SH3H.SharpFrame.Math.TimeRepeatAction.Ignore">
            <summary>
            忽略，新的时间点不会被添加到时间线中
            </summary>
        </member>
        <member name="F:SH3H.SharpFrame.Math.TimeRepeatAction.Cover">
            <summary>
            覆盖，新的时间点将会覆盖原有的时间点
            </summary>
        </member>
        <member name="F:SH3H.SharpFrame.Math.TimeRepeatAction.Throw">
            <summary>
            抛出异常
            </summary>
        </member>
        <member name="T:SH3H.SharpFrame.Math.TimeLine">
            <summary>
            定义了一个抽象的时间线对象，时间线对象封装了对多个时间点对象的操作，
            可以通过时间线对象提供的接口写入、删除、获取指定对象、指点时间点的数据值。
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.#ctor">
            <summary>
            构造函数，初始化时间点对象包含的数据列数量为1
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="columnCount">当前时间线对象中每个时间点包含的数据列数量</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.#ctor(System.Int32,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="columnCount">当前时间线对象中每个时间点包含的数据列数量</param>
            <param name="multiDate">是否允许保存多天的数据</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.Add(SH3H.SharpFrame.Math.TimePoint,SH3H.SharpFrame.Math.TimeRepeatAction)">
            <summary>
            将时间点添加到当前时间线中
            </summary>
            <param name="value">时间点对象</param>
            <param name="action">时间点重复添加时的处理方法，默认为覆盖原有值</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.AddRange(System.Collections.Generic.IEnumerable{SH3H.SharpFrame.Math.TimePoint},SH3H.SharpFrame.Math.TimeRepeatAction)">
            <summary>
            批量向时间线对象中添加时间点
            </summary>
            <param name="values">时间点对象列表</param>
            <param name="action">时间点重复添加时的处理方法，默认为覆盖原有值</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.Remove(System.DateTime)">
            <summary>
            将指点时间的时间点对象从当前时间线中移除
            </summary>
            <param name="time">要移除的时间点的时间</param>
            <returns>返回被移除的时间点对象</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.GetValue(System.DateTime,System.Int32)">
            <summary>
            从当前时间线中获取指定时间点指定索引位置的数据。
            </summary>
            <param name="time">数据时间</param>
            <param name="columnIndex">数据列索引编号，默认为第0列</param>
            <returns>如果指定的时间点和列存在则返回对应的数据，否则返回NULL。</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.GetPoint(System.DateTime)">
            <summary>
            从当前时间线中获取指定时间点。
            </summary>
            <param name="time">数据时间</param>
            <returns>如果指定的时间点存在则返回对应的数据，否则返回NULL。</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.Contains(System.DateTime)">
            <summary>
            确定当前时间线对象中是否已经包含指定时间的时间点对象
            </summary>
            <param name="time">用于判断时间点对象是否存在的时间</param>
            <returns>如果指定的时间点对象存在则返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.Merge(SH3H.SharpFrame.Math.TimeLine,SH3H.SharpFrame.Math.TimeRepeatAction)">
            <summary>
            将目标时间线对象合并到当前时间线中
            </summary>
            <param name="line">待合并的时间线对象</param>
            <param name="repeatType">时间点重复添加时的处理方法，默认为覆盖原有值</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.Slice(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            对当前时间线进行切片处理
            </summary>
            <param name="startTime">开始时间</param>
            <param name="endTime">结束时间</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.Skim(System.Int32)">
            <summary>
            按照步长从时间线中挑选规定间隔的数据
            </summary>
            <param name="step">步长（秒）</param>        
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.CreatePoint">
            <summary>
            创建符合当前时间线对象的时间点对象
            </summary>
            <returns>返回新创建的时间点对象</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.CopyFrom(SH3H.SharpFrame.Math.TimeLine)">
            <summary>
            将源对象的数据复制到当前对象
            </summary>
            <param name="source">源对象</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.CopyTo(SH3H.SharpFrame.Math.TimeLine)">
            <summary>
            将当前对象数据复制到目标对象中
            </summary>
            <param name="target">目标对象</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.Clone">
            <summary>
            创建当前时间线对象的副本。
            </summary>
            <returns>返回当前时间线对象的副本对象</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.Clone(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32)">
            <summary>
            创建当前时间线对象的副本。
            </summary>        
            <param name="startTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <param name="step">步长（秒）</param>
            <returns>返回当前时间线对象的副本对象</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.op_Equality(SH3H.SharpFrame.Math.TimeLine,SH3H.SharpFrame.Math.TimeLine)">
            <summary>
            相等判断
            </summary>
            <param name="left">等号左值</param>
            <param name="right">等号右值</param>
            <returns>如果相等返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.op_Inequality(SH3H.SharpFrame.Math.TimeLine,SH3H.SharpFrame.Math.TimeLine)">
            <summary>
            不等判断
            </summary>
            <param name="left">等号左值</param>
            <param name="right">等号右值</param>
            <returns>如果不相等返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.NullCheck(System.Object,System.Object)">
            <summary>
            空值判断
            </summary>
            <param name="left">等式左值</param>
            <param name="right">等式右值</param>
            <returns>如果左右值都为NULL返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.System#IComparable{SH3H#SharpFrame#Math#TimeLine}#CompareTo(SH3H.SharpFrame.Math.TimeLine)">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.System#ICloneable#Clone">
            <summary>
            创建作为当前实例副本的新对象。
            </summary>
            <returns>
            作为此实例副本的新对象。
            </returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.System#Collections#Generic#IEnumerable{SH3H#SharpFrame#Math#TimePoint}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.System#Collections#Generic#IList{SH3H#SharpFrame#Math#TimePoint}#IndexOf(SH3H.SharpFrame.Math.TimePoint)">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.System#Collections#Generic#IList{SH3H#SharpFrame#Math#TimePoint}#Insert(System.Int32,SH3H.SharpFrame.Math.TimePoint)">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.System#Collections#Generic#IList{SH3H#SharpFrame#Math#TimePoint}#RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.System#Collections#Generic#ICollection{SH3H#SharpFrame#Math#TimePoint}#Add(SH3H.SharpFrame.Math.TimePoint)">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.System#Collections#Generic#ICollection{SH3H#SharpFrame#Math#TimePoint}#Clear">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.System#Collections#Generic#ICollection{SH3H#SharpFrame#Math#TimePoint}#Contains(SH3H.SharpFrame.Math.TimePoint)">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.System#Collections#Generic#ICollection{SH3H#SharpFrame#Math#TimePoint}#CopyTo(SH3H.SharpFrame.Math.TimePoint[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimeLine.System#Collections#Generic#ICollection{SH3H#SharpFrame#Math#TimePoint}#Remove(SH3H.SharpFrame.Math.TimePoint)">
            <inheritdoc/>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.Item(System.Int32)">
            <summary>
            根据索引编号获取时间点对象
            </summary>
            <param name="index">索引编号</param>
            <returns>返回索引编号对应的时间点对象</returns>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.Item(System.DateTime)">
            <summary>
            根据时间获取或设置时间点对象
            </summary>
            <param name="time">查询时间</param>
            <returns>如果指定的时间点存在则返回该时间点对象，否则返回NULL</returns>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.Id">
            <summary>
            获取或设置时间线编号
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.Name">
            <summary>
            获取或设置时间线名称
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.Date">
            <summary>
            获取或设置时间线日期
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.StartDate">
            <summary>
            获取或设置时间线开始日期，用于多天时间线
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.EndDate">
            <summary>
            获取或设置时间线结束日期，用于多天时间线
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.Type">
            <summary>
            获取或设置时间线类型
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.Flag">
            <summary>
            获取或设置时间线标识
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.ColumnCount">
            <summary>
            获取或设置时间线中每个时间点包含的数据列数量
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.MultiDateAvailable">
            <summary>
            获取一个值用于标识当前时间线对象是否允许包含多天的数据
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.PointCount">
            <summary>
            获取当前时间线中的时间点数量
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.Keys">
            <summary>
            获取当前时间线中所有时间列表
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.Values">
            <summary>
            获取当前时间线中的所有时间点列表
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.Points">
            <summary>
            获取或设置当前时间线对象包含的时间点对象列表
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.First">
            <summary>
            获取时间线对象中第一个时间点
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.Last">
            <summary>
            获取时间线对象中最后一个时间点
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.System#Collections#Generic#ICollection{SH3H#SharpFrame#Math#TimePoint}#Count">
            <inheritdoc/>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimeLine.System#Collections#Generic#ICollection{SH3H#SharpFrame#Math#TimePoint}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:SH3H.SharpFrame.Math.TimeRepeatException">
            <summary>
            向<see cref="T:SH3H.SharpFrame.Math.TimeLine"/>对象中添加<see cref="T:SH3H.SharpFrame.Math.TimePoint"/>时发生时间已经存在时促发该异常。
            </summary>
        </member>
        <member name="T:SH3H.SharpFrame.Math.TimePoint">
            <summary>
            定义了一个时间点对象，用于描述<see cref="T:SH3H.SharpFrame.Math.TimeLine"/>对象中的一个时间点，
            一个时间点对象可以包含一个时间点和相关的多列数据值。
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.#ctor">
            <summary>
            构造函数，初始化时间点对象包含的数据列数量为1
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="columnCount">当前时间点对象中包含的数据列数量</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.HasValue(System.Int32)">
            <summary>
            确定指定列中是否包含数据
            </summary>
            <param name="columnIndex">指定的列索引号</param>
            <returns>如果指定列中包含数据则返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.CopyFrom(SH3H.SharpFrame.Math.TimePoint)">
            <summary>
            将源对象的数据复制到当前对象
            </summary>
            <param name="source">源对象</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.CopyTo(SH3H.SharpFrame.Math.TimePoint)">
            <summary>
            将当前对象数据复制到目标对象中
            </summary>
            <param name="target">目标对象</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.Clone">
            <summary>
            创建当前时间点对象的副本。
            </summary>
            <returns>返回当前时间点对象的副本对象</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.op_Equality(SH3H.SharpFrame.Math.TimePoint,SH3H.SharpFrame.Math.TimePoint)">
            <summary>
            相等判断
            </summary>
            <param name="left">等式左值</param>
            <param name="right">等式右值</param>
            <returns>如果相等返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.op_Inequality(SH3H.SharpFrame.Math.TimePoint,SH3H.SharpFrame.Math.TimePoint)">
            <summary>
            不等判断
            </summary>
            <param name="left">等式左值</param>
            <param name="right">等式右值</param>
            <returns>如果不相等返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.op_GreaterThan(SH3H.SharpFrame.Math.TimePoint,SH3H.SharpFrame.Math.TimePoint)">
            <summary>
            大于判断
            </summary>
            <param name="left">等式左值</param>
            <param name="right">等式右值</param>
            <returns>如果左值大于右值返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.op_GreaterThanOrEqual(SH3H.SharpFrame.Math.TimePoint,SH3H.SharpFrame.Math.TimePoint)">
            <summary>
            大于或等于判断
            </summary>
            <param name="left">等式左值</param>
            <param name="right">等式右值</param>
            <returns>如果左值大于或等于右值返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.op_LessThan(SH3H.SharpFrame.Math.TimePoint,SH3H.SharpFrame.Math.TimePoint)">
            <summary>
            小于判断
            </summary>
            <param name="left">等式左值</param>
            <param name="right">等式右值</param>
            <returns>如果左值小于右值返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.op_LessThanOrEqual(SH3H.SharpFrame.Math.TimePoint,SH3H.SharpFrame.Math.TimePoint)">
            <summary>
            小于或等于判断
            </summary>
            <param name="left">等式左值</param>
            <param name="right">等式右值</param>
            <returns>如果左值小于或等于右值返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.NullCheck(System.Object,System.Object)">
            <summary>
            空值判断
            </summary>
            <param name="left">等式左值</param>
            <param name="right">等式右值</param>
            <returns>如果左右值都为NULL返回true，否则返回false</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.TimePoint.System#IComparable{SH3H#SharpFrame#Math#TimePoint}#CompareTo(SH3H.SharpFrame.Math.TimePoint)">
            <summary>
              <see cref="T:SH3H.SharpFrame.Math.TimePoint"/>对象按照时间的先后进行比较，时间早的小于时间晚的对象
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
            The return value has the following meanings: 
             - Value Meaning Less than zero This object is less than the other parameter.
             - Zero This object is equal to other. 
             - Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimePoint.Id">
            <summary>
            获取或设置时间点编号
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimePoint.Time">
            <summary>
            获取或设置时间点
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimePoint.Type">
            <summary>
            获取或设置数据类型
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimePoint.Flag">
            <summary>
            获取或设置数据标志
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimePoint.ColumnCount">
            <summary>
            读取数据列数量
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimePoint.Value0">
            <summary>
            获取或设置数据列表中第一个数据
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.TimePoint.Values">
            <summary>
            获取或设置数据列表
            </summary>
        </member>
        <member name="T:SH3H.SharpFrame.Math.Equation">
            <summary>
            定义方程对象
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Equation.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            构造函数
            </summary>
            <param name="coefficients">方程系数向量</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Equation.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            构造函数
            </summary>
            <param name="coefficients">方程系数向量</param>
            <param name="exponents">方程变量指数列表</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Equation.Solve(System.Double)">
            <summary>
            根据给定的变量X求解方程
            </summary>
            <param name="x">X变量值</param>
            <returns>返回方程解Y</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Equation.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Equation.Coefficients">
            <summary>
            获取或设置方程系数向量
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Equation.Exponents">
            <summary>
            获取或设置方程变量指数
            </summary>
        </member>
        <member name="T:SH3H.SharpFrame.Math.Fitting.IFittingMethod">
            <summary>
            定义曲线拟合函数
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Fitting.IFittingMethod.Fit(SH3H.SharpFrame.Math.Curve,System.Int32)">
            <summary>
            拟合给定曲线
            </summary>
            <param name="curve">曲线对象</param>        
            <param name="n">拟合次数</param>
            <returns>返回拟合结果方程</returns>
        </member>
        <member name="T:SH3H.SharpFrame.Math.Fitting.LeastSquareMethod">
            <summary>
            定义最小二乘法拟合方法
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Fitting.LeastSquareMethod.Fit(SH3H.SharpFrame.Math.Curve,System.Int32)">
            <summary>
            拟合给定曲线
            </summary>
            <param name="curve">曲线对象</param>
            <param name="n">拟合次数，默认为2次拟合</param>
            <returns>
            返回拟合结果方程
            </returns>
        </member>
        <member name="T:SH3H.SharpFrame.Math.Interpolation.IInterpolator">
            <summary>
            定义数据插值器接口，对<see cref="T:SH3H.SharpFrame.Math.TimeLine"/>数据集合进行插值
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Interpolation.IInterpolator.GetPoint(SH3H.SharpFrame.Math.TimeLine,System.DateTime)">
            <summary>
            从数据集合中读取数据，如果数据不存在则进行插值处理。
            </summary>
            <param name="values">数据集合对象</param>
            <param name="time">数据读取时间</param>
            <returns>返回时间点对象</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Interpolation.IInterpolator.GetValue(SH3H.SharpFrame.Math.TimeLine,System.DateTime,System.Int32)">
            <summary>
            从数据集合中读取数据，如果数据不存在则进行插值处理。
            </summary>
            <param name="values">数据集合对象</param>
            <param name="time">数据读取时间</param>
            <param name="index">数据所在列索引</param>
            <returns>返回数据值</returns>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Interpolation.IInterpolator.AddToValues">
            <summary>
            获取或设置一个值，表示是否将插值时间点添加到数据集合中
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Interpolation.IInterpolator.Flag">
            <summary>
            获取或设置插值数据标志
            </summary>
        </member>
        <member name="T:SH3H.SharpFrame.Math.Interpolation.NeighborDirection">
            <summary>
            指定取相邻数据的方向
            </summary>
        </member>
        <member name="F:SH3H.SharpFrame.Math.Interpolation.NeighborDirection.Forward">
            <summary>
            向前取最近的数据
            </summary>
        </member>
        <member name="F:SH3H.SharpFrame.Math.Interpolation.NeighborDirection.Backward">
            <summary>
            向后取最近的数据
            </summary>
        </member>
        <member name="T:SH3H.SharpFrame.Math.Interpolation.Interpolator">
            <summary>
            数据插值器基类
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Interpolation.Interpolator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Interpolation.Interpolator.GetPoint(SH3H.SharpFrame.Math.TimeLine,System.DateTime)">
            <summary>
            从数据集合中读取数据，如果数据不存在则进行插值处理。
            </summary>
            <param name="values">数据集合对象</param>
            <param name="time">数据读取时间</param>
            <returns>返回时间点对象</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Interpolation.Interpolator.GetValue(SH3H.SharpFrame.Math.TimeLine,System.DateTime,System.Int32)">
            <summary>
            从数据集合中读取数据，如果数据不存在则进行插值处理。
            </summary>
            <param name="values">数据集合对象</param>
            <param name="time">数据读取时间</param>
            <param name="index">数据所在列索引</param>
            <returns>返回数据值</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Interpolation.Interpolator.Interpolate(System.DateTime,SH3H.SharpFrame.Math.TimeLine,SH3H.SharpFrame.Math.TimePoint,SH3H.SharpFrame.Math.TimePoint)">
            <summary>
            内部抽象方法，用于计算两个时间点的插值数据
            </summary>
            <param name="time">目标时间</param>
            <param name="line">时间线对象</param>
            <param name="prevPoint">目标前一个时间点对象</param>
            <param name="nextPoint">目标后一个时间点对象</param>
            <returns>返回插值后的时间点对象</returns>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Interpolation.Interpolator.AddToValues">
            <summary>
            获取或设置一个值，表示是否将插值时间点添加到数据集合中
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Interpolation.Interpolator.Flag">
            <summary>
            获取或设置插值数据的数据标志
            </summary>
        </member>
        <member name="T:SH3H.SharpFrame.Math.Interpolation.LinearInterpolator">
            <summary>
            线性数据插值器
            </summary>        
        </member>
        <member name="M:SH3H.SharpFrame.Math.Interpolation.LinearInterpolator.Interpolate(System.DateTime,SH3H.SharpFrame.Math.TimeLine,SH3H.SharpFrame.Math.TimePoint,SH3H.SharpFrame.Math.TimePoint)">
            <summary>
            内部抽象方法，用于计算两个时间点的插值数据
            </summary>
            <param name="time">目标时间</param>
            <param name="line">时间线对象</param>
            <param name="prevPoint">目标前一个时间点对象</param>
            <param name="nextPoint">目标后一个时间点对象</param>
            <returns>
            返回插值后的时间点对象
            </returns>
        </member>
        <member name="T:SH3H.SharpFrame.Math.Interpolation.NearestNeighborInterpolator">
            <summary>
            最近数据插值器
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Interpolation.NearestNeighborInterpolator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Interpolation.NearestNeighborInterpolator.#ctor(SH3H.SharpFrame.Math.Interpolation.NeighborDirection)">
            <summary>
            构造函数
            </summary>
            <param name="direction">相邻数据的取值方向</param>
        </member>
        <member name="M:SH3H.SharpFrame.Math.Interpolation.NearestNeighborInterpolator.Interpolate(System.DateTime,SH3H.SharpFrame.Math.TimeLine,SH3H.SharpFrame.Math.TimePoint,SH3H.SharpFrame.Math.TimePoint)">
            <summary>
            内部抽象方法，用于计算两个时间点的插值数据
            </summary>
            <param name="time">目标时间</param>
            <param name="line">时间线对象</param>
            <param name="prevPoint">目标前一个时间点对象</param>
            <param name="nextPoint">目标后一个时间点对象</param>
            <returns>
            返回插值后的时间点对象
            </returns>
        </member>
        <member name="P:SH3H.SharpFrame.Math.Interpolation.NearestNeighborInterpolator.Direction">
            <summary>
            获取或设置相邻数据的取值方向
            </summary>
        </member>
    </members>
</doc>

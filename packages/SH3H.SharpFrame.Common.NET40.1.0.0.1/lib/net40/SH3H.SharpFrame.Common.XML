<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SH3H.SharpFrame.Common</name>
    </assembly>
    <members>
        <member name="T:SH3H.SharpFrame.ArrayExtensions">
            <summary>
            Array extension methods
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.ArrayExtensions.Clear(System.Array)">
            <summary>
            Clears the array completely
            </summary>
            <param name="array">Array to clear</param>
            <returns>The final array</returns>
        </member>
        <member name="M:SH3H.SharpFrame.ArrayExtensions.Clear``1(``0[])">
            <summary>
            Clears the array completely
            </summary>
            <param name="array">Array to clear</param>
            <typeparam name="TType">Array type</typeparam>
            <returns>The final array</returns>
        </member>
        <member name="M:SH3H.SharpFrame.ArrayExtensions.Combine``1(``0[],``0[])">
            <summary>
            Combines two arrays and returns a new array containing both values
            </summary>
            <typeparam name="TType">Type of the data in the array</typeparam>
            <param name="array1">Array 1</param>
            <param name="array2">Array 2</param>
            <returns>A new array containing both arrays' values</returns>
        </member>
        <member name="M:SH3H.SharpFrame.ArrayExtensions.ToEncodedString(System.Byte[],System.Text.Encoding,System.Int32,System.Int32)">
            <summary>
            Converts a byte array to a string
            </summary>
            <param name="buffer">input array</param>
            <param name="encodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
            <param name="count">Number of bytes starting at the index to convert (use -1 for the entire array starting at the index)</param>
            <returns>string of the byte array</returns>
        </member>
        <member name="M:SH3H.SharpFrame.ArrayExtensions.ToBase64String(System.Byte[])">
            <summary>
            Converts a byte array into a base 64 string
            </summary>
            <param name="buffer">Input array</param>
            <returns>The equivalent byte array in a base 64 string</returns>
        </member>
        <member name="T:SH3H.SharpFrame.ICollectionExtensions">
            <summary>
            ICollection extension method
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.ICollectionExtensions.AddAndReturn``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to a list and returns the item
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="collection">Collection to add to</param>
            <param name="item">Item to add to the collection</param>
            <returns>The original item</returns>
        </member>
        <member name="M:SH3H.SharpFrame.ICollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a list of items to the collection
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="collection">Collection</param>
            <param name="items">Items to add</param>
            <returns>The collection with the added items</returns>
        </member>
        <member name="M:SH3H.SharpFrame.ICollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Predicate{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="collection">Collection to add to</param>
            <param name="item">Item to add to the collection</param>
            <param name="predicate">Predicate that an item needs to satisfy in order to be added</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.ICollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="collection">Collection to add to</param>
            <param name="items">Items to add to the collection</param>
            <param name="predicate">Predicate that an item needs to satisfy in order to be added</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.ICollectionExtensions.AddIfUnique``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="collection">Collection to add to</param>
            <param name="item">Item to add to the collection</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.ICollectionExtensions.AddIfUnique``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="collection">Collection to add to</param>
            <param name="items">Items to add to the collection</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.ICollectionExtensions.Remove``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all items that fit the predicate passed in
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="collection">Collection to remove items from</param>
            <param name="predicate">Predicate used to determine what items to remove</param>
        </member>
        <member name="M:SH3H.SharpFrame.ICollectionExtensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all items in the list from the collection
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="collection">Collection</param>
            <param name="items">Items to remove</param>
            <returns>The collection with the items removed</returns>
        </member>
        <member name="T:SH3H.SharpFrame.DoubleRange">
            <summary>
            Represents a double range with minimum and maximum values.
            </summary>
            
            <remarks>
            <para>The class represents a double range with inclusive limits -
            both minimum and maximum values of the range are included into it.
            Mathematical notation of such range is <b>[min, max]</b>.</para>
            
            <para>Sample usage:</para>
            <code>
            // create [0.25, 1.5] range
            DoubleRange range1 = new DoubleRange( 0.25, 1.5 );
            // create [1.00, 2.25] range
            DoubleRange range2 = new DoubleRange( 1.00, 2.25 );
            // check if values is inside of the first range
            if ( range1.IsInside( 0.75 ) )
            {
                // ...
            }
            // check if the second range is inside of the first range
            if ( range1.IsInside( range2 ) )
            {
                // ...
            }
            // check if two ranges overlap
            if ( range1.IsOverlapping( range2 ) )
            {
                // ...
            }
            </code>
            </remarks>
            
        </member>
        <member name="M:SH3H.SharpFrame.DoubleRange.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SH3H.SharpFrame.DoubleRange"/> class.
            </summary>
            
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            
        </member>
        <member name="M:SH3H.SharpFrame.DoubleRange.IsInside(System.Double)">
            <summary>
            Check if the specified value is inside of the range.
            </summary>
            
            <param name="x">Value to check.</param>
            
            <returns><b>True</b> if the specified value is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.DoubleRange.IsInside(SH3H.SharpFrame.DoubleRange)">
            <summary>
            Check if the specified range is inside of the range.
            </summary>
            
            <param name="range">Range to check.</param>
            
            <returns><b>True</b> if the specified range is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.DoubleRange.IsOverlapping(SH3H.SharpFrame.DoubleRange)">
            <summary>
            Check if the specified range overlaps with the range.
            </summary>
            
            <param name="range">Range to check for overlapping.</param>
            
            <returns><b>True</b> if the specified range overlaps with the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.DoubleRange.ToIntRange(System.Boolean)">
             <summary>
             Convert the signle precision range to integer range.
             </summary>
             
             <param name="provideInnerRange">Specifies if inner integer range must be returned or outer range.</param>
             
             <returns>Returns integer version of the range.</returns>
             
             <remarks>If <paramref name="provideInnerRange"/> is set to <see langword="true"/>, then the
             returned integer range will always fit inside of the current single precision range.
             If it is set to <see langword="false"/>, then current single precision range will always
             fit into the returned integer range.</remarks>
            
        </member>
        <member name="M:SH3H.SharpFrame.DoubleRange.op_Equality(SH3H.SharpFrame.DoubleRange,SH3H.SharpFrame.DoubleRange)">
             <summary>
             Equality operator - checks if two ranges have equal min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are equal.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.DoubleRange.op_Inequality(SH3H.SharpFrame.DoubleRange,SH3H.SharpFrame.DoubleRange)">
             <summary>
             Inequality operator - checks if two ranges have different min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are not equal.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.DoubleRange.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:SH3H.SharpFrame.FloatRange"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another range to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.DoubleRange.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.DoubleRange.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains min/max values of the range in readable form.</returns>
            
        </member>
        <member name="P:SH3H.SharpFrame.DoubleRange.Min">
            <summary>
            Minimum value of the range.
            </summary>
            
            <remarks><para>The property represents minimum value (left side limit) or the range -
            [<b>min</b>, max].</para></remarks>
            
        </member>
        <member name="P:SH3H.SharpFrame.DoubleRange.Max">
            <summary>
            Maximum value of the range.
            </summary>
            
            <remarks><para>The property represents maximum value (right side limit) or the range -
            [min, <b>max</b>].</para></remarks>
            
        </member>
        <member name="P:SH3H.SharpFrame.DoubleRange.Length">
            <summary>
            Length of the range (deffirence between maximum and minimum values).
            </summary>
        </member>
        <member name="T:SH3H.SharpFrame.IntRange">
             <summary>
             Represents an integer range with minimum and maximum values.
             </summary>
             
             <remarks>
             <para>The class represents an integer range with inclusive limits -
             both minimum and maximum values of the range are included into it.
             Mathematical notation of such range is <b>[min, max]</b>.</para>
             
             <para>Sample usage:</para>
             <code>
             // create [1, 10] range
             IntRange range1 = new IntRange( 1, 10 );
             // create [5, 15] range
             IntRange range2 = new IntRange( 5, 15 );
             // check if values is inside of the first range
             if ( range1.IsInside( 7 ) )
             {
                 // ...
             }
             // check if the second range is inside of the first range
             if ( range1.IsInside( range2 ) )
             {
                 // ...
             }
             // check if two ranges overlap
             if ( range1.IsOverlapping( range2 ) )
             {
                 // ...
             }
             </code>
             </remarks>
            
        </member>
        <member name="M:SH3H.SharpFrame.IntRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SH3H.SharpFrame.IntRange"/> structure.
            </summary>
            
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            
        </member>
        <member name="M:SH3H.SharpFrame.IntRange.IsInside(System.Int32)">
            <summary>
            Check if the specified value is inside of the range.
            </summary>
            
            <param name="x">Value to check.</param>
            
            <returns><b>True</b> if the specified value is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.IntRange.IsInside(SH3H.SharpFrame.IntRange)">
            <summary>
            Check if the specified range is inside of the range.
            </summary>
            
            <param name="range">Range to check.</param>
            
            <returns><b>True</b> if the specified range is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.IntRange.IsOverlapping(SH3H.SharpFrame.IntRange)">
            <summary>
            Check if the specified range overlaps with the range.
            </summary>
            
            <param name="range">Range to check for overlapping.</param>
            
            <returns><b>True</b> if the specified range overlaps with the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.IntRange.op_Implicit(SH3H.SharpFrame.IntRange)~SH3H.SharpFrame.FloatRange">
            <summary>
            Implicit conversion to <see cref="T:SH3H.SharpFrame.FloatRange"/>.
            </summary>
            
            <param name="range">Integer range to convert to single precision range.</param>
            
            <returns>Returns new single precision range which min/max values are implicitly converted
            to floats from min/max values of the specified integer range.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.IntRange.op_Equality(SH3H.SharpFrame.IntRange,SH3H.SharpFrame.IntRange)">
             <summary>
             Equality operator - checks if two ranges have equal min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are equal.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.IntRange.op_Inequality(SH3H.SharpFrame.IntRange,SH3H.SharpFrame.IntRange)">
             <summary>
             Inequality operator - checks if two ranges have different min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are not equal.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.IntRange.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:SH3H.SharpFrame.FloatRange"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another range to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.IntRange.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.IntRange.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains min/max values of the range in readable form.</returns>
            
        </member>
        <member name="P:SH3H.SharpFrame.IntRange.Min">
            <summary>
            Minimum value of the range.
            </summary>
            
            <remarks><para>The property represents minimum value (left side limit) or the range -
            [<b>min</b>, max].</para></remarks>
            
        </member>
        <member name="P:SH3H.SharpFrame.IntRange.Max">
            <summary>
            Maximum value of the range.
            </summary>
            
            <remarks><para>The property represents maximum value (right side limit) or the range -
            [min, <b>max</b>].</para></remarks>
            
        </member>
        <member name="P:SH3H.SharpFrame.IntRange.Length">
            <summary>
            Length of the range (deffirence between maximum and minimum values).
            </summary>
        </member>
        <member name="T:SH3H.SharpFrame.FloatRange">
             <summary>
             Represents a range with minimum and maximum values, which are single precision numbers (floats).
             </summary>
             
             <remarks>
             <para>The class represents a single precision range with inclusive limits -
             both minimum and maximum values of the range are included into it.
             Mathematical notation of such range is <b>[min, max]</b>.</para>
             
             <para>Sample usage:</para>
             <code>
             // create [0.25, 1.5] range
             Range range1 = new Range( 0.25f, 1.5f );
             // create [1.00, 2.25] range
             Range range2 = new Range( 1.00f, 2.25f );
             // check if values is inside of the first range
             if ( range1.IsInside( 0.75f ) )
             {
                 // ...
             }
             // check if the second range is inside of the first range
             if ( range1.IsInside( range2 ) )
             {
                 // ...
             }
             // check if two ranges overlap
             if ( range1.IsOverlapping( range2 ) )
             {
                 // ...
             }
             </code>
             </remarks>
            
        </member>
        <member name="M:SH3H.SharpFrame.FloatRange.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SH3H.SharpFrame.FloatRange"/> structure.
            </summary>
            
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            
        </member>
        <member name="M:SH3H.SharpFrame.FloatRange.IsInside(System.Single)">
            <summary>
            Check if the specified value is inside of the range.
            </summary>
            
            <param name="x">Value to check.</param>
            
            <returns><b>True</b> if the specified value is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.FloatRange.IsInside(SH3H.SharpFrame.FloatRange)">
            <summary>
            Check if the specified range is inside of the range.
            </summary>
            
            <param name="range">Range to check.</param>
            
            <returns><b>True</b> if the specified range is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.FloatRange.IsOverlapping(SH3H.SharpFrame.FloatRange)">
            <summary>
            Check if the specified range overlaps with the range.
            </summary>
            
            <param name="range">Range to check for overlapping.</param>
            
            <returns><b>True</b> if the specified range overlaps with the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.FloatRange.ToIntRange(System.Boolean)">
             <summary>
             Convert the signle precision range to integer range.
             </summary>
             
             <param name="provideInnerRange">Specifies if inner integer range must be returned or outer range.</param>
             
             <returns>Returns integer version of the range.</returns>
             
             <remarks>If <paramref name="provideInnerRange"/> is set to <see langword="true"/>, then the
             returned integer range will always fit inside of the current single precision range.
             If it is set to <see langword="false"/>, then current single precision range will always
             fit into the returned integer range.</remarks>
            
        </member>
        <member name="M:SH3H.SharpFrame.FloatRange.op_Equality(SH3H.SharpFrame.FloatRange,SH3H.SharpFrame.FloatRange)">
             <summary>
             Equality operator - checks if two ranges have equal min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are equal.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.FloatRange.op_Inequality(SH3H.SharpFrame.FloatRange,SH3H.SharpFrame.FloatRange)">
             <summary>
             Inequality operator - checks if two ranges have different min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are not equal.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.FloatRange.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:SH3H.SharpFrame.FloatRange"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another range to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.FloatRange.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:SH3H.SharpFrame.FloatRange.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains min/max values of the range in readable form.</returns>
            
        </member>
        <member name="P:SH3H.SharpFrame.FloatRange.Min">
            <summary>
            Minimum value of the range.
            </summary>
            
            <remarks><para>The property represents minimum value (left side limit) or the range -
            [<b>min</b>, max].</para></remarks>
            
        </member>
        <member name="P:SH3H.SharpFrame.FloatRange.Max">
            <summary>
            Maximum value of the range.
            </summary>
            
            <remarks><para>The property represents maximum value (right side limit) or the range -
            [min, <b>max</b>].</para></remarks>
            
        </member>
        <member name="P:SH3H.SharpFrame.FloatRange.Length">
            <summary>
            Length of the range (deffirence between maximum and minimum values).
            </summary>
        </member>
        <member name="T:SH3H.SharpFrame.Collections.IEnumerableExtensions">
            <summary>
            IEnumerable extensions
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Collections.IEnumerableExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable between the start and end indexes
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="list">IEnumerable to iterate over</param>
            <param name="start">item to start with</param>
            <param name="end">item to end with</param>
            <param name="action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Collections.IEnumerableExtensions.For``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            Does a function for each item in the IEnumerable between the start and end indexes and returns an IEnumerable of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="list">IEnumerable to iterate over</param>
            <param name="start">item to start with</param>
            <param name="end">item to end with</param>
            <param name="function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Collections.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="list">IEnumerable to iterate over</param>
            <param name="action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Collections.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Does a function for each item in the IEnumerable, returning a list of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="list">IEnumerable to iterate over</param>
            <param name="function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Collections.IEnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Converts the list to a string where each item is seperated by the seperator
            </summary>
            <typeparam name="T">item type</typeparam>
            <param name="list">list to convert</param>
            <param name="itemOutput">Used to convert the item to a string (defaults to calling ToString)</param>
            <param name="seperator">seperator to use between items (defaults to ,)</param>
            <returns>The string version of the list</returns>
        </member>
        <member name="T:SH3H.SharpFrame.Data.DataTableExtensions">
            <summary>
            Extension methods for DbDataReader objects
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataTableExtensions.IsColumnExist(System.Data.DataTable,System.String)">
            <summary>
            Check the existance of the specified column by name.
            </summary>
            <param name="table">Datatable object</param>
            <param name="name">Name of the column</param>
            <returns>True if the column exsits, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataTableExtensions.IsColumnExist(System.Data.DataTable,System.Int32)">
            <summary>
            Check the existance of the specified column by index.
            </summary>
            <param name="table">Datatable object</param>
            <param name="index">Index of the column</param>
            <returns>True if the column exsits, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataTableExtensions.IsColumnExist(System.Data.DataRow,System.String)">
            <summary>
            Check the existance of the specified column by name.
            </summary>
            <param name="row">DataRow object</param>
            <param name="name">Name of the column</param>
            <returns>True if the column exsits, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataTableExtensions.IsColumnExist(System.Data.DataRow,System.Int32)">
            <summary>
            Check the existance of the specified column by index.
            </summary>
            <param name="row">DataRow object</param>
            <param name="index">Index of the column</param>
            <returns>True if the column exsits, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataTableExtensions.GetTableValue``1(System.Data.DataRow,System.String,``0,System.Boolean)">
            <summary>
            Returns a parameter's value
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="row">DataRow object</param>
            <param name="name">Parameter name</param>
            <param name="defaultValue">Default value for the parameter</param>
            <param name="canNull">Determine whether the value of column can be null or empty.</param>
            <returns>if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataTableExtensions.GetTableValue``1(System.Data.DataRow,System.Int32,``0,System.Boolean)">
            <summary>
            Returns a parameter's value
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="row">DataRow object</param>
            <param name="index">Index of the column</param>
            <param name="defaultValue">Default value for the parameter</param>
            <param name="canNull">Determine whether the value of column can be null or empty.</param>
            <returns>if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataTableExtensions.GetTableValue(System.Data.DataRow,System.String,System.Type,System.Object,System.Boolean)">
            <summary>
            Returns a parameter's value
            </summary>
            <param name="row">Datatable object</param>
            <param name="name">Parameter name</param>
            <param name="type">The type to return</param>
            <param name="defaultValue">Default value for the parameter</param>
            <param name="canNull">Determine whether the value of column can be null or empty.</param>
            <returns>if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataTableExtensions.GetTableValue(System.Data.DataRow,System.Int32,System.Type,System.Object,System.Boolean)">
            <summary>
            Returns a parameter's value
            </summary>
            <param name="row">DataRow object</param>
            <param name="index">Position in the reader row</param>
            <param name="type">The type to return</param>
            <param name="defaultValue">Default value for the parameter</param>
            <param name="canNull">Determine whether the value of column can be null or empty.</param>
            <returns>if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned.</returns>
        </member>
        <member name="T:SH3H.SharpFrame.Data.DbCommandExtensions">
            <summary>
            Extension methods for DbCommand objects
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DbCommandExtensions.AddParameter(System.Data.Common.DbCommand,System.String,System.Int32,System.String,System.Data.ParameterDirection)">
            <summary>
            Adds a parameter to the call (for strings only)
            </summary>
            <param name="command">command object</param>
            <param name="id">Name of the parameter</param>
            <param name="value">value to add</param>
            <param name="direction">direction that the parameter goes (in or out)</param>
            <param name="length">Size of the string(either -1 or greater than 4000 should be used to indicate nvarchar(max))</param>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DbCommandExtensions.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.SqlDbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            Adds a parameter to the call (for all types other than strings)
            </summary>
            <param name="id">Name of the parameter</param>
            <param name="value">value to add</param>
            <param name="direction">direction that the parameter goes (in or out)</param>
            <param name="command">command object</param>
            <param name="type">SQL type of the parameter</param>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DbCommandExtensions.AddParameter``1(System.Data.Common.DbCommand,System.String,``0,System.Data.ParameterDirection)">
            <summary>
            Adds a parameter to the call (for all types other than strings)
            </summary>
            <typeparam name="TDataType">Data type of the parameter</typeparam>
            <param name="id">Name of the parameter</param>
            <param name="direction">direction that the parameter goes (in or out)</param>
            <param name="command">command object</param>
            <param name="value">value to add</param>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DbCommandExtensions.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            Adds a parameter to the call (for all types other than strings)
            </summary>
            <param name="id">Name of the parameter</param>
            <param name="direction">direction that the parameter goes (in or out)</param>
            <param name="command">command object</param>
            <param name="value">value to add</param>
            <param name="type">SQL type of the parameter</param>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DbCommandExtensions.BeginTransaction(System.Data.Common.DbCommand)">
            <summary>
            Begins a transaction
            </summary>
            <param name="command">command object</param>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DbCommandExtensions.ClearParameters(System.Data.Common.DbCommand)">
            <summary>
            Clears the parameters
            </summary>
            <param name="command">command object</param>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DbCommandExtensions.Close(System.Data.Common.DbCommand)">
            <summary>
            Closes the connection
            </summary>
            <param name="command">command object</param>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DbCommandExtensions.Commit(System.Data.Common.DbCommand)">
            <summary>
            Commits a transaction
            </summary>
            <param name="command">command object</param>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DbCommandExtensions.ExecuteDataSet(System.Data.Common.DbCommand,System.Data.Common.DbProviderFactory)">
            <summary>
            Executes the query and returns a data set
            </summary>
            <param name="command">command object</param>
            <param name="factory">DbProviderFactory being used</param>
            <returns>A dataset filled with the results of the query</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DbCommandExtensions.ExecuteScalar``1(System.Data.Common.DbCommand)">
            <summary>
            Executes the stored procedure as a scalar query
            </summary>
            <param name="command">command object</param>
            <returns>The object of the first row and first column</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DbCommandExtensions.GetOutputParameter``1(System.Data.Common.DbCommand,System.String,``0)">
            <summary>
            Returns an output parameter's value
            </summary>
            <typeparam name="TDataType">Data type of the object</typeparam>
            <param name="command">command object</param>
            <param name="id">Parameter name</param>
            <param name="defaultValue">Default value for the parameter</param>
            <returns>if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DbCommandExtensions.Open(System.Data.Common.DbCommand)">
            <summary>
            Opens the connection
            </summary>
            <param name="command">command object</param>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DbCommandExtensions.Rollback(System.Data.Common.DbCommand)">
            <summary>
            Rolls back a transaction
            </summary>
            <param name="command">command object</param>
        </member>
        <member name="T:SH3H.SharpFrame.Data.DataReaderExtensions">
            <summary>
            Extension methods for DbDataReader objects
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataReaderExtensions.GetParameter``1(System.Data.IDataReader,System.String,``0)">
            <summary>
            Returns a parameter's value
            </summary>
            <param name="reader">Reader object</param>
            <param name="id">Parameter name</param>
            <param name="defaultValue">Default value for the parameter</param>
            <returns>if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataReaderExtensions.GetParameter``1(System.Data.IDataReader,System.Int32,``0)">
            <summary>
            Returns a parameter's value
            </summary>
            <param name="reader">Reader object</param>
            <param name="position">Position in the reader row</param>
            <param name="defaultValue">Default value for the parameter</param>
            <returns>if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataReaderExtensions.IsFieldExist(System.Data.IDataReader,System.String)">
            <summary>
            Check the existance of the specified field by name.
            </summary>
            <param name="reader">Reader object</param>
            <param name="name">Name of the field</param>
            <returns>True if the field exsits, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataReaderExtensions.IsFieldExist(System.Data.IDataReader,System.Int32)">
            <summary>
            Check the existance of the specified field by index.
            </summary>
            <param name="reader">Reader object</param>
            <param name="index">The index of the field</param>
            <returns>True if the field exsits, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataReaderExtensions.GetReaderValue``1(System.Data.IDataReader,System.String,``0,System.Boolean)">
            <summary>
            Returns a parameter's value
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="reader">Reader object</param>
            <param name="name">Parameter name</param>
            <param name="defaultValue">Default value for the parameter</param>
            <param name="canNull">Determine whether the value of field can be null or empty.</param>
            <returns>if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataReaderExtensions.GetReaderValue``1(System.Data.IDataReader,System.Int32,``0,System.Boolean)">
            <summary>
            Returns a parameter's value
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="reader">Reader object</param>
            <param name="index">Position in the reader row</param>
            <param name="defaultValue">Default value for the parameter</param>
            <param name="canNull">Determine whether the value of field can be null or empty.</param>
            <returns>if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataReaderExtensions.GetReaderValue(System.Data.IDataReader,System.String,System.Type,System.Object,System.Boolean)">
            <summary>
            Returns a parameter's value
            </summary>
            <param name="reader">Reader object</param>
            <param name="name">Parameter name</param>
            <param name="type">The type to return</param>
            <param name="defaultValue">Default value for the parameter</param>
            <param name="canNull">Determine whether the value of field can be null or empty.</param>
            <returns>if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Data.DataReaderExtensions.GetReaderValue(System.Data.IDataReader,System.Int32,System.Type,System.Object,System.Boolean)">
            <summary>
            Returns a parameter's value
            </summary>
            <param name="reader">Reader object</param>
            <param name="index">Position in the reader row</param>
            <param name="type">The type to return</param>
            <param name="defaultValue">Default value for the parameter</param>
            <param name="canNull">Determine whether the value of field can be null or empty.</param>
            <returns>if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned.</returns>
        </member>
        <member name="T:SH3H.SharpFrame.Encryption.Hash">
            <summary>
            Hash based extensions
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.Hash.GetHash(System.Byte[],System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Computes the hash of a byte array
            </summary>
            <param name="buffer">Byte array to hash</param>
            <param name="algorithm">Hash algorithm to use (defaults to SHA1)</param>
            <returns>The hash of the byte array</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.Hash.GetHash(System.String,System.Security.Cryptography.HashAlgorithm,System.Text.Encoding)">
            <summary>
            Computes the hash of a string
            </summary>
            <param name="data">string to hash</param>
            <param name="algorithm">Algorithm to use (defaults to SHA1)</param>
            <param name="encodingUsing">Encoding used by the string (defaults to UTF8)</param>
            <returns>The hash of the string</returns>
        </member>
        <member name="T:SH3H.SharpFrame.Encryption.Shift">
            <summary>
            Extensions that deal with bit xoring
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.Shift.Encrypt(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Encrypts the data using a basic xor of the key (not very secure unless doing a one time pad)
            </summary>
            <param name="buffer">Data to encrypt</param>
            <param name="key">Key to use</param>
            <param name="oneTimePad">Is this a one time pad?</param>
            <returns>The encrypted data</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.Shift.Encrypt(System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Encrypts the data using a basic xor of the key (not very secure unless doing a one time pad)
            </summary>
            <param name="data">Data to encrypt</param>
            <param name="key">Key to use</param>
            <param name="oneTimePad">Is this a one time pad?</param>
            <param name="encodingUsing">Encoding that the Data uses (defaults to UTF8)</param>
            <returns>The encrypted data</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.Shift.Decrypt(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Decrypts the data using a basic xor of the key (not very secure unless doing a one time pad)
            </summary>
            <param name="buffer">Data to encrypt</param>
            <param name="key">Key to use</param>
            <param name="oneTimePad">Is this a one time pad?</param>
            <returns>The decrypted data</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.Shift.Decrypt(System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Decrypts the data using a basic xor of the key (not very secure unless doing a one time pad)
            </summary>
            <param name="data">Data to decrypt</param>
            <param name="key">Key to use</param>
            <param name="oneTimePad">Is this a one time pad?</param>
            <param name="encodingUsing">Encoding that the Data uses (defaults to UTF8)</param>
            <returns>The encrypted data</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.Shift.Process(System.Byte[],System.Byte[])">
            <summary>
            Actually does the encryption/decryption
            </summary>
        </member>
        <member name="T:SH3H.SharpFrame.Encryption.SymmetricEncryption">
            <summary>
            Symmetric key extensions
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.SymmetricEncryption.Encrypt(System.String,System.String,System.Text.Encoding,System.Security.Cryptography.SymmetricAlgorithm,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Encrypts a string
            </summary>
            <param name="data">Text to be encrypted</param>
            <param name="key">Password to encrypt with</param>
            <param name="algorithmUsing">Algorithm to use for encryption (defaults to AES)</param>
            <param name="salt">Salt to encrypt with</param>
            <param name="hashAlgorithm">Can be either SHA1 or MD5</param>
            <param name="passwordIterations">Number of iterations to do</param>
            <param name="initialVector">Needs to be 16 ASCII characters long</param>
            <param name="keySize">Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES)</param>
            <param name="encodingUsing">Encoding that the original string is using (defaults to UTF8)</param>
            <returns>An encrypted string (Base 64 string)</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.SymmetricEncryption.Encrypt(System.Byte[],System.String,System.Security.Cryptography.SymmetricAlgorithm,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Encrypts a byte array
            </summary>
            <param name="buffer">Data to be encrypted</param>
            <param name="key">Password to encrypt with</param>
            <param name="algorithmUsing">Algorithm to use for encryption (defaults to AES)</param>
            <param name="salt">Salt to encrypt with</param>
            <param name="hashAlgorithm">Can be either SHA1 or MD5</param>
            <param name="passwordIterations">Number of iterations to do</param>
            <param name="initialVector">Needs to be 16 ASCII characters long</param>
            <param name="keySize">Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES)</param>
            <returns>An encrypted byte array</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.SymmetricEncryption.Decrypt(System.String,System.String,System.Text.Encoding,System.Security.Cryptography.SymmetricAlgorithm,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Decrypts a string
            </summary>
            <param name="data">Text to be decrypted (Base 64 string)</param>
            <param name="key">Password to decrypt with</param>
            <param name="encodingUsing">Encoding that the output string should use (defaults to UTF8)</param>
            <param name="algorithmUsing">Algorithm to use for decryption (defaults to AES)</param>
            <param name="salt">Salt to decrypt with</param>
            <param name="hashAlgorithm">Can be either SHA1 or MD5</param>
            <param name="passwordIterations">Number of iterations to do</param>
            <param name="initialVector">Needs to be 16 ASCII characters long</param>
            <param name="keySize">Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES)</param>
            <returns>A decrypted string</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.SymmetricEncryption.Decrypt(System.Byte[],System.String,System.Security.Cryptography.SymmetricAlgorithm,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Decrypts a byte array
            </summary>
            <param name="buffer">Data to be decrypted</param>
            <param name="key">Password to decrypt with</param>
            <param name="algorithmUsing">Algorithm to use for decryption</param>
            <param name="salt">Salt to decrypt with</param>
            <param name="hashAlgorithm">Can be either SHA1 or MD5</param>
            <param name="passwordIterations">Number of iterations to do</param>
            <param name="initialVector">Needs to be 16 ASCII characters long</param>
            <param name="keySize">Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES)</param>
            <returns>A decrypted byte array</returns>
        </member>
        <member name="T:SH3H.SharpFrame.Encryption.RSAEncryption">
            <summary>
            Utility class for doing RSA Encryption
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.RSAEncryption.Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            Encrypts a string using RSA
            </summary>
            <param name="input">Input string (should be small as anything over 128 bytes can not be decrypted)</param>
            <param name="key">Key to use for encryption</param>
            <param name="encodingUsing">Encoding that the input string uses (defaults to UTF8)</param>
            <returns>An encrypted string (64bit string)</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.RSAEncryption.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            Decrypts a string using RSA
            </summary>
            <param name="input">Input string (should be small as anything over 128 bytes can not be decrypted)</param>
            <param name="key">Key to use for decryption</param>
            <param name="encodingUsing">Encoding that the result should use (defaults to UTF8)</param>
            <returns>A decrypted string</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.RSAEncryption.CreateKey(System.Boolean)">
            <summary>
            Creates a new set of keys
            </summary>
            <param name="privatePublic">True if private key should be included, false otherwise</param>
            <returns>XML representation of the key information</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.RSAEncryption.SignHash(System.String,System.String,System.String@,System.Text.Encoding)">
            <summary>
            Takes a string and creates a signed hash of it
            </summary>
            <param name="input">Input string</param>
            <param name="key">Key to encrypt/sign with</param>
            <param name="hash">This will be filled with the unsigned hash</param>
            <param name="encodingUsing">Encoding that the input is using (defaults to UTF8)</param>
            <returns>A signed hash of the input (64bit string)</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Encryption.RSAEncryption.VerifyHash(System.String,System.String,System.String)">
            <summary>
            Verifies a signed hash against the unsigned version
            </summary>
            <param name="hash">The unsigned hash (should be 64bit string)</param>
            <param name="signedHash">The signed hash (should be 64bit string)</param>
            <param name="key">The key to use in decryption</param>
            <returns>True if it is verified, false otherwise</returns>
        </member>
        <member name="T:SH3H.SharpFrame.ComparableExtensions">
            <summary>
            IComparable extensions
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.ComparableExtensions.Between``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Checks if an item is between two values
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">Value to check</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
            <param name="comparer">Comparer used to compare the values (defaults to GenericComparer)"</param>
            <returns>True if it is between the values, false otherwise</returns>
        </member>
        <member name="T:SH3H.SharpFrame.DateTimeExtensions">
            <summary>
            DateTime extension methods
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.DateTimeExtensions.DaysInMonth(System.DateTime)">
            <summary>
            Returns the number of days in the month
            </summary>
            <param name="date">Date to get the month from</param>
            <returns>The number of days in the month</returns>
        </member>
        <member name="M:SH3H.SharpFrame.DateTimeExtensions.DaysLeftInWeek(System.DateTime)">
            <summary>
            Gets the number of days left in a week
            </summary>
            <param name="date">The date to check against</param>
            <returns>The number of days left in a week</returns>
        </member>
        <member name="M:SH3H.SharpFrame.DateTimeExtensions.DaysLeftInMonth(System.DateTime)">
            <summary>
            Gets the number of days left in the month based on the date passed in
            </summary>
            <param name="date">The date to check against</param>
            <returns>The number of days left in a month</returns>
        </member>
        <member name="M:SH3H.SharpFrame.DateTimeExtensions.DaysLeftInYear(System.DateTime)">
            <summary>
            Gets the number of days left in a year based on the date passed in
            </summary>
            <param name="date">The date to check against</param>
            <returns>The number of days left in a year</returns>
        </member>
        <member name="M:SH3H.SharpFrame.DateTimeExtensions.FirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Returns the first day of a week based on the date sent in
            </summary>
            <param name="date">date to get the first day of the week from</param>
            <param name="culture">The culture to use (defaults to current culture)</param>
            <returns>The first day of the week</returns>
        </member>
        <member name="M:SH3H.SharpFrame.DateTimeExtensions.LastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Returns the last day of a week based on the date sent in
            </summary>
            <param name="date">Date to get the last day of the week from</param>
            <param name="culture">The culture to use (defaults to current culture)</param>
            <returns>The last day of the week</returns>
        </member>
        <member name="M:SH3H.SharpFrame.DateTimeExtensions.FirstDayOfMonth(System.DateTime)">
            <summary>
            Returns the first day of a month based on the date sent in
            </summary>
            <param name="date">Date to get the first day of the month from</param>
            <returns>The first day of the month</returns>
        </member>
        <member name="M:SH3H.SharpFrame.DateTimeExtensions.LastDayOfMonth(System.DateTime)">
            <summary>
            Returns the last day of the month based on the date sent in
            </summary>
            <param name="date">Date to get the last day from</param>
            <returns>The last day of the month</returns>
        </member>
        <member name="M:SH3H.SharpFrame.DateTimeExtensions.FirstTimeOfDay(System.DateTime)">
            <summary>
            Returns the first time of the day based on the date sent in
            </summary>
            <param name="date">Date to get the first time from</param>
            <returns>The first time of the day</returns>
        </member>
        <member name="M:SH3H.SharpFrame.DateTimeExtensions.LastTimeOfDay(System.DateTime)">
            <summary>
            Returns the last time of the day based on the date sent in
            </summary>
            <param name="date">Date to get the last time from</param>
            <returns>The last time of the day</returns>
        </member>
        <member name="M:SH3H.SharpFrame.DateTimeExtensions.IsWeekDay(System.DateTime)">
            <summary>
            Determines if this is a week day
            </summary>
            <param name="date">Date to check against</param>
            <returns>Whether this is a week day or not</returns>
        </member>
        <member name="M:SH3H.SharpFrame.DateTimeExtensions.IsWeekEnd(System.DateTime)">
            <summary>
            Determines if this is a week end
            </summary>
            <param name="date">Date to check against</param>
            <returns>Whether this is a week end or not</returns>
        </member>
        <member name="T:SH3H.SharpFrame.GenericObjectExtensions">
            <summary>
            泛型对象的扩展方法
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.GenericObjectExtensions.IsDefault``1(``0)">
            <summary>
            检查对象是否为default(T)
            </summary>
            <param name="obj">需要接受检查的对象</param>
            <returns>如果对象为default(T)返回true，否则返回false。</returns>
        </member>
        <member name="M:SH3H.SharpFrame.GenericObjectExtensions.IsNotDefault``1(``0)">
            <summary>
            检查对象是否不为default(T)
            </summary>
            <param name="obj">需要接受检查的对象</param>
            <returns>如果对象不为default(T)返回true，否则返回false。</returns>
        </member>
        <member name="M:SH3H.SharpFrame.GenericObjectExtensions.NullCheck``1(``0,``0)">
            <summary>
            检查对象是否为null，如果对象为null则返回defaultValue，否则返回对象。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">需要接受检查的对象</param>
            <param name="defaultValue">默认值</param>
            <returns>如果对象为null则返回默认值，否则返回参数对象。</returns>
        </member>
        <member name="M:SH3H.SharpFrame.GenericObjectExtensions.ThrowIfDefault``1(``0,System.String)">
            <summary>
            检查对象是否为default(T)，如果为default(T)则抛出异常，否则返回该对象。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">需要接受检查的对象</param>
            <param name="name">参数名称</param>
            <returns>返回参数对象</returns>
            <exception cref="T:System.ArgumentNullException">对象为default(T)时抛出异常</exception>
        </member>
        <member name="T:SH3H.SharpFrame.StringExtensions">
            <summary>
            String extension methods
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.StringExtensions.ToBase64(System.String,System.Text.Encoding)">
            <summary>
            Converts from the specified encoding to a base 64 string
            </summary>
            <param name="input">Input string</param>
            <param name="originalEncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
            <returns>Bas64 string</returns>
        </member>
        <member name="M:SH3H.SharpFrame.StringExtensions.FromBase64(System.String,System.Text.Encoding)">
            <summary>
            Converts base 64 string based on the encoding passed in
            </summary>
            <param name="input">Input string</param>
            <param name="encodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
            <returns>string in the encoding format</returns>
        </member>
        <member name="M:SH3H.SharpFrame.StringExtensions.FromBase64(System.String)">
            <summary>
            Converts base 64 string to a byte array
            </summary>
            <param name="input">Input string</param>
            <returns>A byte array equivalent of the base 64 string</returns>
        </member>
        <member name="M:SH3H.SharpFrame.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Gets the first x number of characters from the left hand side
            </summary>
            <param name="input">Input string</param>
            <param name="length">x number of characters to return</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:SH3H.SharpFrame.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Gets the last x number of characters from the right hand side
            </summary>
            <param name="input">Input string</param>
            <param name="length">x number of characters to return</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:SH3H.SharpFrame.StringExtensions.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
            Converts a string to a byte array
            </summary>
            <param name="input">input string</param>
            <param name="encodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
            <returns>the byte array representing the string</returns>
        </member>
        <member name="M:SH3H.SharpFrame.StringExtensions.ToFirstCharacterUpperCase(System.String)">
            <summary>
            Takes the first character of an input string and makes it uppercase
            </summary>
            <param name="input">Input string</param>
            <returns>String with the first character capitalized</returns>
        </member>
        <member name="M:SH3H.SharpFrame.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses a string
            </summary>
            <param name="input">Input string</param>
            <returns>The reverse of the input string</returns>
        </member>
        <member name="M:SH3H.SharpFrame.StringExtensions.FilterOutText(System.String,System.String)">
            <summary>
            Removes the filter text from the input.
            </summary>
            <param name="input">Input text</param>
            <param name="filter">Regex expression of text to filter out</param>
            <returns>The input text minus the filter text.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.StringExtensions.KeepFilterText(System.String,System.String)">
            <summary>
            Removes everything that is not in the filter text from the input.
            </summary>
            <param name="input">Input text</param>
            <param name="filter">Regex expression of text to keep</param>
            <returns>The input text minus everything not in the filter text.</returns>
        </member>
        <member name="M:SH3H.SharpFrame.StringExtensions.AlphaNumericOnly(System.String)">
            <summary>
            Keeps only alphanumeric characters
            </summary>
            <param name="input">Input string</param>
            <returns>the string only containing alphanumeric characters</returns>
        </member>
        <member name="M:SH3H.SharpFrame.StringExtensions.AlphaCharactersOnly(System.String)">
            <summary>
            Keeps only alpha characters
            </summary>
            <param name="input">Input string</param>
            <returns>the string only containing alpha characters</returns>
        </member>
        <member name="M:SH3H.SharpFrame.StringExtensions.NumericOnly(System.String,System.Boolean)">
            <summary>
            Keeps only numeric characters
            </summary>
            <param name="input">Input string</param>
            <param name="keepNumericPunctuation">Determines if decimal places should be kept</param>
            <returns>the string only containing numeric characters</returns>
        </member>
        <member name="T:SH3H.SharpFrame.Threading.LockExtensions">
            <summary>
            定义锁扩展类，可以快速的实现对临界区的资源对象访问
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Threading.LockExtensions.Locking(System.Object,System.Action)">
            <summary>
            进入资源临界区，锁定参数<paramref name="source"/>制定的资源，并执行<paramref name="action"/>中定义的方法。
            </summary>
            <param name="source">待锁定的资源对象</param>
            <param name="action">方法回调</param>
        </member>
        <member name="M:SH3H.SharpFrame.Threading.LockExtensions.Locking``1(``0,System.Action{``0})">
            <summary>
            进入资源临界区，锁定参数<paramref name="source"/>制定的资源，并执行<paramref name="action"/>中定义的方法。
            </summary>
            <typeparam name="TSource">待锁定资源对象类型</typeparam>
            <param name="source">待锁定的资源对象</param>
            <param name="action">方法回调</param>
        </member>
        <member name="M:SH3H.SharpFrame.Threading.LockExtensions.Locking``1(System.Object,System.Func{``0})">
            <summary>
            进入资源临界区，锁定参数<paramref name="func"/>制定的资源，并执行<paramref name="action"/>中定义的方法。
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="source">待锁定的资源对象</param>
            <param name="func">函数回调</param>
            <returns>返回回调函数<paramref name="func"/>的返回值</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Threading.LockExtensions.Locking``2(``0,System.Func{``0,``1})">
            <summary>
            进入资源临界区，锁定参数<paramref name="func"/>制定的资源，并执行<paramref name="action"/>中定义的方法。
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="source">待锁定的资源对象</param>
            <param name="func">函数回调</param>
            <returns>返回回调函数<paramref name="func"/>的返回值</returns>
        </member>
        <member name="T:SH3H.SharpFrame.TypeConversionExtensions">
            <summary>
            Extensions converting between types, etc.
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.TypeConversionExtensions.ToSQLDbType(System.Type)">
            <summary>
            Converts a .Net type to SQLDbType value
            </summary>
            <param name="type">.Net type</param>
            <returns>The corresponding SQLDbType</returns>
        </member>
        <member name="M:SH3H.SharpFrame.TypeConversionExtensions.ToSqlDbType(System.Data.DbType)">
            <summary>
            Converts a DbType to a SqlDbType
            </summary>
            <param name="type">type to convert</param>
            <returns>The corresponding SqlDbType (if it exists)</returns>
        </member>
        <member name="M:SH3H.SharpFrame.TypeConversionExtensions.ToDbType(System.Type)">
            <summary>
            Converts a .Net type to DbType value
            </summary>
            <param name="type">.Net type</param>
            <returns>The corresponding DbType</returns>
        </member>
        <member name="M:SH3H.SharpFrame.TypeConversionExtensions.ToDbType(System.Data.SqlDbType)">
            <summary>
            Converts SqlDbType to DbType
            </summary>
            <param name="type">type to convert</param>
            <returns>The corresponding DbType (if it exists)</returns>
        </member>
        <member name="M:SH3H.SharpFrame.TypeConversionExtensions.ToList``1(System.Data.DataTable,System.Func{``0})">
            <summary>
            Attempts to convert the DataTable to a list of objects
            </summary>
            <typeparam name="T">type the objects should be in the list</typeparam>
            <param name="data">DataTable to convert</param>
            <param name="creator">Function used to create each object</param>
            <returns>The DataTable converted to a list of objects</returns>
        </member>
        <member name="M:SH3H.SharpFrame.TypeConversionExtensions.ToType(System.Data.SqlDbType)">
            <summary>
            Converts a SQLDbType value to .Net type
            </summary>
            <param name="type">SqlDbType type</param>
            <returns>The corresponding .Net type</returns>
        </member>
        <member name="M:SH3H.SharpFrame.TypeConversionExtensions.ToType(System.Data.DbType)">
            <summary>
            Converts a DbType value to .Net type
            </summary>
            <param name="type">DbType</param>
            <returns>The corresponding .Net type</returns>
        </member>
        <member name="M:SH3H.SharpFrame.TypeConversionExtensions.TryTo``2(``0,``1)">
            <summary>
            Attempts to convert the object to another type and returns the value
            </summary>
            <typeparam name="T">type to convert from</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="obj">Object to convert</param>
            <param name="defaultValue">Default value to return if there is an issue or it can't be converted</param>
            <returns>The object converted to the other type or the default value if there is an error or can't be converted</returns>
        </member>
        <member name="M:SH3H.SharpFrame.TypeConversionExtensions.TryTo``1(System.Object,``0)">
            <summary>
            Attempts to convert the object to another type and returns the value
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="obj">Object to convert</param>
            <param name="defaultValue">Default value to return if there is an issue or it can't be converted</param>
            <returns>The object converted to the other type or the default value if there is an error or can't be converted</returns>
        </member>
        <member name="M:SH3H.SharpFrame.TypeConversionExtensions.TryTo``1(``0,System.Type,System.Object)">
            <summary>
            Attempts to convert the object to another type and returns the value
            </summary>
            <typeparam name="T">type to convert from</typeparam>
            <param name="resultType">Result type</param>
            <param name="obj">Object to convert</param>
            <param name="defaultValue">Default value to return if there is an issue or it can't be converted</param>
            <returns>The object converted to the other type or the default value if there is an error or can't be converted</returns>
        </member>
        <member name="M:SH3H.SharpFrame.TypeConversionExtensions.TryTo(System.Object,System.Type,System.Object)">
            <summary>
            Attempts to convert the object to another type and returns the value
            </summary>
            <param name="resultType">Result type</param>
            <param name="obj">Object to convert</param>
            <param name="defaultValue">Default value to return if there is an issue or it can't be converted</param>
            <returns>The object converted to the other type or the default value if there is an error or can't be converted</returns>
        </member>
        <member name="M:SH3H.SharpFrame.TypeConversionExtensions.DynamicConvert(System.Object,System.Type,System.Object)">
            <summary>
            Dynamic convert the object to another type and returns the value
            </summary>
            <param name="obj">Object to convert</param>
            <param name="targetType">The type which object converts to</param>
            <param name="defaultValue">Default value to return if there is an issue or it can't be converted</param>
            <returns>The object converted to the other type or the default value if there is an error or can't be converted</returns>
        </member>
        <member name="T:SH3H.SharpFrame.GenericComparer`1">
            <summary>
            Generic IComparable class
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:SH3H.SharpFrame.GenericComparer`1.Compare(`0,`0)">
            <summary>
            Compares the two objects
            </summary>
            <param name="x">Object 1</param>
            <param name="y">Object 2</param>
            <returns>0 if they're equal, any other value they are not</returns>
        </member>
        <member name="T:SH3H.SharpFrame.GenericEqualityComparer`1">
            <summary>
            Generic equality comparer
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:SH3H.SharpFrame.GenericEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines if the two items are equal
            </summary>
            <param name="x">Object 1</param>
            <param name="y">Object 2</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.GenericEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Get hash code
            </summary>
            <param name="obj">Object to get the hash code of</param>
            <returns>The object's hash code</returns>
        </member>
        <member name="T:SH3H.SharpFrame.GenericStringFormatter">
            <summary>
            Generic string formatter
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.GenericStringFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.GenericStringFormatter.GetFormat(System.Type)">
            <summary>
            Gets the format associated with the type
            </summary>
            <param name="formatType">Format type</param>
            <returns>The appropriate formatter based on the type</returns>
        </member>
        <member name="M:SH3H.SharpFrame.GenericStringFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Formats the string
            </summary>
            <param name="format">Format to use</param>
            <param name="arg">Argument object to use</param>
            <param name="formatProvider">Format provider to use</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:SH3H.SharpFrame.GenericStringFormatter.Format(System.String,System.String)">
            <summary>
            Formats the string based on the pattern
            </summary>
            <param name="input">Input string</param>
            <param name="formatPattern">Format pattern</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:SH3H.SharpFrame.GenericStringFormatter.GetMatchingInput(System.String,System.Char,System.Char@)">
            <summary>
            Gets matching input
            </summary>
            <param name="input">Input string</param>
            <param name="formatChar">Current format character</param>
            <param name="matchChar">The matching character found</param>
            <returns>The remainder of the input string left</returns>
        </member>
        <member name="M:SH3H.SharpFrame.GenericStringFormatter.IsValid(System.String)">
            <summary>
            Checks if the format pattern is valid
            </summary>
            <param name="formatPattern">Format pattern</param>
            <returns>Returns true if it's valid, otherwise false</returns>
        </member>
        <member name="P:SH3H.SharpFrame.GenericStringFormatter.DigitChar">
            <summary>
            Represents digits (defaults to #)
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.GenericStringFormatter.AlphaChar">
            <summary>
            Represents alpha characters (defaults to @)
            </summary>
        </member>
        <member name="P:SH3H.SharpFrame.GenericStringFormatter.EscapeChar">
            <summary>
            Represents the escape character (defaults to \)
            </summary>
        </member>
        <member name="T:SH3H.SharpFrame.Guard">
            <summary>
            用于验证和识别参数正确性
            </summary>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.ThrowIfDefault``1(``0,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is equal to default value and throws an ArgumentNullException if it is
            </summary>
            <param name="item">The object to check</param>
            <param name="equalityComparer">Equality comparer used to determine if the object is equal to default</param>
            <param name="name">name of the argument</param>
            <returns>Returns item</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.ThrowIfDefault``1(``0,System.Exception,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is equal to default value and throws the exception that is passed in if it is
            </summary>
            <param name="item">The object to check</param>
            <param name="equalityComparer">Equality comparer used to determine if the object is equal to default</param>
            <param name="exception">exception to throw</param>
            <returns>Returns item</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.ThrowIfNull``1(``0,System.String)">
            <summary>
            Determines if the object is null and throws an ArgumentNullException if it is
            </summary>
            <param name="item">The object to check</param>
            <param name="name">name of the argument</param>
            <returns>Returns item</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.ThrowIfNull``1(``0,System.Exception)">
            <summary>
            Determines if the object is null and throws the exception passed in if it is
            </summary>
            <param name="item">The object to check</param>
            <param name="exception">exception to throw</param>
            <returns>Returns item</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.ThrowIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Determines if the IEnumerable is null or empty and throws an ArgumentNullException if it is
            </summary>
            <typeparam name="T">item type</typeparam>
            <param name="item">The object to check</param>
            <param name="name">name of the argument</param>
            <returns>Returns item</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.ThrowIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Exception)">
            <summary>
            Determines if the IEnumerable is null or empty and throws the exception passed in if it is
            </summary>
            <typeparam name="T">item type</typeparam>
            <param name="item">The object to check</param>
            <param name="exception">exception to throw</param>
            <returns>Returns item</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.ThrowIfNullOrDBNull``1(``0,System.String)">
            <summary>
            Determines if the object is null or DbNull and throws an ArgumentNullException if it is
            </summary>
            <param name="item">The object to check</param>
            <param name="name">name of the argument</param>
            <returns>Returns item</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.ThrowIfNullOrDBNull``1(``0,System.Exception)">
            <summary>
            Determines if the object is null or DbNull and throws the exception passed in if it is
            </summary>
            <param name="item">The object to check</param>
            <param name="exception">exception to throw</param>
            <returns>Returns item</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.ThrowIfNotInRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Determines if the parameter value is between the rangeBegin and rangeEnd 
            and throws an ArgumentOutOfRangeException if it is not.
            </summary>
            <param name="value">The value to check.</param>
            <param name="rangeBegin">The range begin value.</param>
            <param name="rangeEnd">The range end value.</param>
            <param name="paramName">The parameter name.</param>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.ThrowIfTrue(System.Boolean,System.String)">
            <summary>
            The ArgumentException will be thrown if the parameter assertion is true.
            </summary>
            <param name="assertion">The assertion value.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.ThrowIfTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            The ArgumentException will be thrown if the parameter assertion is true.
            </summary>
            <param name="assertion">The assertion value.</param>
            <param name="message">The exception message.</param>
            <param name="parameters">The parameters of message template.</param>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.AssertIsFalse(System.Boolean,System.String)">
            <summary>
            The ArgumentException will be thrown if the parameter assertion is false.
            </summary>
            <param name="assertion">The assertion value.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.AssertIsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            The ArgumentException will be thrown if the parameter assertion is false.
            </summary>
            <param name="assertion">The assertion value.</param>
            <param name="message">The exception message.</param>
            <param name="parameters">The parameters of message template.</param>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.IsNotNull(System.Object)">
            <summary>
            Determines if the object is not null
            </summary>
            <param name="obj">The object to check</param>
            <returns>False if it is null, true otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.IsNull(System.Object)">
            <summary>
            Determines if the object is null
            </summary>
            <param name="obj">The object to check</param>
            <returns>True if it is null, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.IsNotNullOrDBNull(System.Object)">
            <summary>
            Determines if the object is not null or DBNull
            </summary>
            <param name="obj">The object to check</param>
            <returns>False if it is null/DBNull, true otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.IsNullOrDBNull(System.Object)">
            <summary>
            Determines if the object is null or DBNull
            </summary>
            <param name="obj">The object to check</param>
            <returns>True if it is null/DBNull, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if a list is null or empty
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="value">List to check</param>
            <returns>True if it is null or empty, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if a list is not null or empty
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="value">List to check</param>
            <returns>True if it is not null or empty, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.IsNotDefault``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is not null
            </summary>
            <typeparam name="T">obj type</typeparam>
            <param name="obj">The object to check</param>
            <param name="equalityComparer">Equality comparer used to determine if the object is equal to default</param>
            <returns>False if it is null, true otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.IsDefault``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is null
            </summary>
            <typeparam name="T">obj type</typeparam>
            <param name="obj">The object to check</param>
            <param name="equalityComparer">Equality comparer used to determine if the object is equal to default</param>
            <returns>True if it is null, false otherwise</returns>
        </member>
        <member name="M:SH3H.SharpFrame.Guard.NullCheck``1(``0,``0)">
            <summary>
            Does a null check and either returns the default value (if it is null) or the object
            </summary>
            <typeparam name="T">obj type</typeparam>
            <param name="obj">obj to check</param>
            <param name="defaultValue">Default value to return in case it is null</param>
            <returns>The default value if it is null, the object otherwise</returns>
        </member>
    </members>
</doc>

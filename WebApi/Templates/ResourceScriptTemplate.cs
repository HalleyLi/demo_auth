// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SH3H.WAP.WebApi.Templates
{
    using SH3H.WAP.WebApi;
    using SH3H.SDK.Share;
    using SH3H.SDK.WebApi.Core;
    using System.Linq;
    using System.Text;
    using System.Reflection;
    using System.Collections.Generic;
    using System.Web.Http;
    using System.Web.Http.Controllers;
    using System.Web.Http.Description;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\MyWorks\WAP2.0\WebApi\Templates\ResourceScriptTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class ResourceScriptTemplate : ResourceScriptTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\'use strict\';\r\nvar wapResources = null;\r\n\r\ntry {\r\n\twapResources = angular.module(" +
                    "\'wapResources\');\r\n} catch(err) {\r\n\twapResources = angular.module(\'wapResources\'," +
                    " [\'wapEnv\']);\r\n}\r\n\r\nwapResources\r\n\r\n");
            
            #line 26 "E:\MyWorks\WAP2.0\WebApi\Templates\ResourceScriptTemplate.tt"

    var session = (Dictionary<string, object>)Session;		
    var apis = (IEnumerable<ApiDescription>)session["apis"];
    var req  = (HttpRequestContext)session["req"];

    var groups = apis.GroupBy<ApiDescription, Type>(api => api.ActionDescriptor.ControllerDescriptor.ControllerType);
    foreach (var group in groups)
    {
        // 获取资源名称
        var attrRes = group.Key.GetCustomAttributes(typeof(ResourceAttribute), false).SingleOrDefault();
        if (attrRes == null) continue;

        // 获取资源相对根路径
        var attrRoute = group.Key.GetCustomAttributes(typeof(RoutePrefixAttribute), false).SingleOrDefault();
        if (attrRoute == null) continue;

        string resName = ((ResourceAttribute)attrRes).Name;
        string baseUrl = ((ResourceAttribute)attrRes).Url;
        if(baseUrl == null)
            baseUrl = string.Format("{0}/{1}", req.VirtualPathRoot, ((RoutePrefixAttribute)attrRoute).Prefix);
        string paramsStr = ((ResourceAttribute)attrRes).Params;
        if(paramsStr == null) paramsStr = "{ }";

            
            #line default
            #line hidden
            this.Write("        .factory(\'");
            
            #line 49 "E:\MyWorks\WAP2.0\WebApi\Templates\ResourceScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resName));
            
            #line default
            #line hidden
            this.Write("\', [\'$resource\',\'envInfo\',\r\n            function ($resource, envInfo) {\r\n        " +
                    "        return $resource(envInfo.wapRes + \'");
            
            #line 51 "E:\MyWorks\WAP2.0\WebApi\Templates\ResourceScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(baseUrl));
            
            #line default
            #line hidden
            this.Write("\', ");
            
            #line 51 "E:\MyWorks\WAP2.0\WebApi\Templates\ResourceScriptTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramsStr));
            
            #line default
            #line hidden
            this.Write(", {\t\t\t\t\t\t\r\n                    ");
            
            #line 52 "E:\MyWorks\WAP2.0\WebApi\Templates\ResourceScriptTemplate.tt"

                        foreach (var api in group)
                        {
                            // 获取ActionParam特性
                            var attrParam = api.ActionDescriptor.GetCustomAttributes<ActionParamAttribute>().SingleOrDefault() as ActionParamAttribute;							

                            StringBuilder apiBuilder = new StringBuilder();
                            apiBuilder.AppendFormat("{0}:{{", api.ActionDescriptor.ActionName.ToFirstCharacterLowerCase());
                            apiBuilder.AppendFormat("method:'{0}'", api.HttpMethod.Method);          
                            apiBuilder.AppendFormat(",url:envInfo.wapRes + '{0}/{1}'", req.VirtualPathRoot, Utils.UrlReplace(api.RelativePath));

                            int paramCount = api.ParameterDescriptions
                                                .Where(p => p.Source == ApiParameterSource.FromUri)
                                                .Count(); 
                            if (paramCount > 0)
                            {
                                apiBuilder.Append(",params: {");
                                foreach (var param in api.ParameterDescriptions)
                                {
                                    if (param.Source == ApiParameterSource.FromUri)
                                    {                        
                                        apiBuilder.AppendFormat("{0}: '@{0}',", param.Name);
                                    }
                                }
                                apiBuilder.Remove(apiBuilder.Length - 1, 1);
                                apiBuilder.Append("}");
                            }

                            if(attrParam == null)
                            {
                                // 如果方法未设置ActionParamAttribute特性，尝试解析返回值
                                var respType = api.ResponseDescription.DeclaredType;
                                if (respType != null)
                                {
                                    if (respType.IsArray || respType.UnderlyingSystemType.Name == "IEnumerable`1")
                                    {
                                        apiBuilder.Append(",isArray:true");
                                    }
                                }
                            }
                            else
                            {
                                if(attrParam.IsArray)	
                                {
                                    apiBuilder.Append(",isArray:true");
                                }
                            }

                            apiBuilder.Append("},");
                            WriteLine(apiBuilder.ToString());
                        }							
                    
            
            #line default
            #line hidden
            this.Write("                });\r\n            }\r\n        ])\r\n");
            
            #line 107 "E:\MyWorks\WAP2.0\WebApi\Templates\ResourceScriptTemplate.tt"

    }
	

            
            #line default
            #line hidden
            this.Write("\r\nif (typeof exports === \'object\' && typeof module !== \'undefined\') {\r\n\tmodule.ex" +
                    "ports = wapResources;\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class ResourceScriptTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
